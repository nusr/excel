{
  "version": 3,
  "sources": ["../src/containers/FormulaBar/index.tsx", "../src/containers/FormulaBar/FormulaEditor.tsx", "../src/containers/FormulaBar/index.module.css", "../src/containers/FormulaBar/DefineName.tsx"],
  "sourcesContent": ["import React, { useSyncExternalStore, useMemo, memo, useCallback } from 'react';\nimport {\n  MultipleLineEditor,\n  getEditorStyle,\n  getDisplayStyle,\n} from './FormulaEditor';\nimport { LINE_BREAK, classnames, convertToReference } from '@/util';\nimport styles from './index.module.css';\nimport { IController, EditorStatus } from '@/types';\nimport { activeCellStore, coreStore, styleStore } from '@/containers/store';\nimport { DefineName } from './DefineName';\n\ninterface Props {\n  controller: IController;\n}\n\nexport const FormulaBarContainer: React.FunctionComponent<Props> = memo(\n  ({ controller }) => {\n    const activeCell = useSyncExternalStore(\n      activeCellStore.subscribe,\n      activeCellStore.getSnapshot,\n    );\n    const cellStyle = useSyncExternalStore(\n      styleStore.subscribe,\n      styleStore.getSnapshot,\n    );\n    const { editorStatus } = useSyncExternalStore(\n      coreStore.subscribe,\n      coreStore.getSnapshot,\n    );\n    const displayName = useMemo(() => {\n      return (\n        activeCell.defineName ||\n        convertToReference({\n          row: activeCell.row,\n          col: activeCell.col,\n          rowCount: 1,\n          colCount: 1,\n          sheetId: '',\n        })\n      );\n    }, [activeCell.defineName, activeCell.col, activeCell.row]);\n    const handleClick = useCallback(() => {\n      coreStore.setState({\n        editorStatus: EditorStatus.EDIT_FORMULA_BAR,\n      });\n    }, []);\n    const style = useMemo(() => {\n      return getDisplayStyle(cellStyle);\n    }, [cellStyle]);\n\n    return (\n      <div className={styles['formula-bar-wrapper']} data-testid=\"formula-bar\">\n        <DefineName\n          controller={controller}\n          displayName={displayName}\n          defineName={activeCell.defineName}\n        />\n        <div className={styles['formula-bar-editor-wrapper']}>\n          {editorStatus !== EditorStatus.NONE && (\n            <MultipleLineEditor\n              initValue={activeCell.value}\n              controller={controller}\n              style={getEditorStyle(activeCell, editorStatus, cellStyle)}\n              testId=\"formula-editor\"\n              isMergeCell={cellStyle.isMergeCell}\n              className={\n                editorStatus === EditorStatus.EDIT_CELL\n                  ? styles['edit-cell']\n                  : ''\n              }\n            />\n          )}\n          <div\n            className={classnames(styles['formula-bar-value'], {\n              [styles['show']]: editorStatus !== EditorStatus.EDIT_FORMULA_BAR,\n              [styles['wrap']]:\n                cellStyle.isMergeCell &&\n                activeCell.displayValue.includes(LINE_BREAK),\n            })}\n            style={style}\n            onClick={handleClick}\n            data-testid=\"formula-editor-trigger\"\n          >\n            {activeCell.displayValue}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nFormulaBarContainer.displayName = 'FormulaBarContainer';\n\nexport default FormulaBarContainer\n", "import React, {\n  CSSProperties,\n  memo,\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport { EditorStatus, IController } from '@/types';\nimport styles from './index.module.css';\nimport { CellStoreType, coreStore, StyleStoreType } from '../store';\nimport {\n  MAX_NAME_LENGTH,\n  FORMULA_EDITOR_ROLE,\n  MERGE_CELL_LINE_BREAK,\n  classnames,\n  TEXTAREA_MAX_ROWS,\n  LINE_BREAK,\n  isMergeContent,\n} from '@/util';\n\ninterface MultipleLineEditorProps {\n  isMergeCell: boolean;\n  initValue: string;\n  style: CSSProperties | undefined;\n  testId?: string;\n  controller: IController;\n  className?: string;\n}\nexport function getDisplayStyle(\n  style: StyleStoreType,\n  isFormulaBar = true,\n): CSSProperties {\n  const result: CSSProperties = {};\n  if (style?.isItalic) {\n    result.fontStyle = 'italic';\n  }\n  if (style?.isBold) {\n    result.fontWeight = 'bold';\n  }\n  if (style?.fontFamily) {\n    result.fontFamily = style?.fontFamily;\n  }\n  if (style?.fontSize && !isFormulaBar) {\n    result.fontSize = style?.fontSize;\n  }\n  if (style?.fillColor && !isFormulaBar) {\n    result.backgroundColor = style.fillColor;\n  }\n  if (style?.fontColor && !isFormulaBar) {\n    result.color = style?.fontColor;\n  }\n  if (style?.underline && style?.isStrike) {\n    result.textDecorationLine = 'underline line-through';\n  } else if (style?.underline) {\n    result.textDecorationLine = 'underline';\n  } else if (style?.isStrike) {\n    result.textDecorationLine = 'line-through';\n  }\n  // if (style.underline === EUnderLine.DOUBLE) {\n  //   result.textDecorationStyle = 'double';\n  // }\n  return result;\n}\nexport function getEditorStyle(\n  style: CellStoreType,\n  editorStatus: EditorStatus,\n  cellStyle: StyleStoreType,\n): CSSProperties | undefined {\n  if (editorStatus === EditorStatus.NONE) {\n    return undefined;\n  }\n  const isFormulaBar = editorStatus === EditorStatus.EDIT_FORMULA_BAR;\n\n  const editorStyle: CSSProperties = getDisplayStyle(cellStyle, isFormulaBar);\n  if (isFormulaBar) {\n    return editorStyle;\n  }\n  const result = {\n    ...editorStyle,\n    top: style.top,\n    left: style.left,\n    width: style.width,\n    height: style.height,\n  };\n  return result;\n}\n\nconst minRows = 1;\n\nfunction countRows(count: number) {\n  return Math.max(Math.min(TEXTAREA_MAX_ROWS, count), minRows);\n}\n\nexport const MultipleLineEditor: React.FunctionComponent<MultipleLineEditorProps> =\n  memo(({ initValue, style, testId, isMergeCell, controller, className }) => {\n    const ref = useRef<HTMLTextAreaElement>(null);\n    const [rowCount, setRowCount] = useState(minRows);\n    useEffect(() => {\n      if (isMergeCell) {\n        const count = initValue.split(MERGE_CELL_LINE_BREAK).length;\n        setRowCount(countRows(count));\n      } else {\n        const rows = Math.ceil((ref.current?.scrollHeight || 20) / 20);\n        setRowCount(countRows(rows));\n      }\n    }, [isMergeCell, initValue]);\n    const onKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        event.stopPropagation();\n        if (event.key === 'Enter' || event.key === 'Tab') {\n          let value = event.currentTarget.value;\n          const { range, isMerged } = controller.getActiveRange();\n          const cellData = controller.getCell(range);\n          if (\n            typeof cellData?.value === 'string' &&\n            isMergeContent(isMerged, cellData?.value)\n          ) {\n            value = value.replaceAll(LINE_BREAK, MERGE_CELL_LINE_BREAK);\n          }\n          controller.batchUpdate(() => {\n            controller.setCellValue(value, range);\n            if (event.key === 'Enter') {\n              controller.setNextActiveCell('down');\n            } else {\n              controller.setNextActiveCell('right');\n            }\n            return true;\n          });\n          coreStore.setState({\n            editorStatus: EditorStatus.NONE,\n          });\n          event.currentTarget.value = '';\n          event.currentTarget.blur();\n        } else {\n          const rows = Math.ceil(event.currentTarget.scrollHeight / 20);\n          setRowCount(countRows(rows));\n        }\n      },\n      [],\n    );\n    return (\n      <textarea\n        spellCheck\n        autoFocus\n        ref={ref}\n        style={style}\n        maxLength={MAX_NAME_LENGTH * 100}\n        data-testid={testId}\n        data-role={FORMULA_EDITOR_ROLE}\n        onKeyDown={onKeyDown}\n        className={classnames(styles['formula-editor'], className)}\n        defaultValue={initValue}\n        rows={rowCount}\n      />\n    );\n  });\n\nMultipleLineEditor.displayName = 'MultipleLineEditor';\n", ".formula-bar-wrapper {\n  width: 100%;\n  padding: var(--mediumPadding) var(--largePadding);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid var(--borderColor);\n  height: var(--formulaBarHeight);\n  box-sizing: content-box;\n}\n.defined-name {\n  margin-right: 10px;\n  min-width: 100px;\n}\n\n.defined-name-editor {\n  flex: 1;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  border: none;\n  text-align: center;\n  overflow: hidden;\n  box-sizing: border-box;\n  padding: var(--tinyPadding);\n}\n\n.formula-bar-editor-wrapper {\n  border: 1px solid var(--borderColor);\n  flex: 1;\n  height: 100%;\n  box-sizing: content-box;\n  border-radius: 2px;\n  background-color: var(--white);\n  position: relative;\n}\n\n.formula-bar-value {\n  padding: 0 var(--tinyPadding);\n  margin: 0;\n  display: none;\n  width: 100%;\n  box-sizing: border-box;\n  background-color: var(--white);\n  z-index: var(--middleZIndex);\n  position: relative;\n  min-height: var(--formulaBarHeight);\n}\n.formula-bar-value.wrap {\n  white-space: pre-wrap;\n  border: 1px solid var(--borderColor);\n}\n.formula-bar-value.show {\n  display: flex;\n  align-items: center;\n}\n\n.formula-editor {\n  overflow: hidden;\n  width: 100%;\n  min-height: var(--formulaBarHeight);\n  padding: 0 var(--tinyPadding);\n  margin: 0;\n  border: 1px solid var(--primaryColor);\n  outline: none;\n  background-color: var(--white);\n  position: absolute;\n  box-sizing: border-box;\n  z-index: var(--middleZIndex);\n  resize: none;\n}\n\n.formula-editor.edit-cell {\n  position: fixed;\n  min-height: unset;\n}\n", "import React, {\n  useEffect,\n  useState,\n  useRef,\n  useSyncExternalStore,\n  useMemo,\n  memo,\n  useCallback,\n} from 'react';\nimport { IController } from '@/types';\nimport styles from './index.module.css';\nimport {\n  parseReference,\n  MAX_NAME_LENGTH,\n  MAX_PARAMS_COUNT,\n  DEFINED_NAME_REG_EXP,\n} from '@/util';\nimport { scrollToView } from '@/canvas';\nimport { SelectList } from '../../components';\nimport { defineNameStore } from '../store';\n\ninterface Props {\n  controller: IController;\n  displayName: string;\n  defineName: string;\n}\n\nexport const DefineName: React.FunctionComponent<Props> = memo(\n  ({ controller, displayName, defineName }) => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    const [value, setValue] = useState(displayName);\n    const defineNameList = useSyncExternalStore(\n      defineNameStore.subscribe,\n      defineNameStore.getSnapshot,\n    );\n    const popupList = useMemo(() => {\n      return defineNameList.map((v) => ({\n        disabled: false,\n        value: v,\n        label: v,\n      }));\n    }, [defineNameList]);\n    useEffect(() => {\n      setValue(displayName);\n    }, [displayName]);\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLInputElement>) => {\n        event.stopPropagation();\n        if (event.key === 'Enter') {\n          const t = event.currentTarget.value.trim().toLowerCase();\n          ref.current?.blur();\n          if (!t) {\n            setValue(displayName);\n            return;\n          }\n          const range = controller.checkDefineName(t);\n          if (range) {\n            setValue(displayName);\n            scrollToView(controller, range);\n            return;\n          }\n          const r = parseReference(t, (sheetName: string) => {\n            const list = controller.getSheetList();\n            const item = list.find((v) => v.name === sheetName);\n            return item?.sheetId || '';\n          });\n          const sheetInfo = controller.getSheetInfo(\n            r?.sheetId || controller.getCurrentSheetId(),\n          )!;\n          if (r && r.col < sheetInfo.colCount && r.row < sheetInfo.rowCount) {\n            r.sheetId = r.sheetId || controller.getCurrentSheetId();\n            setValue(displayName);\n            scrollToView(controller, r);\n            return;\n          }\n          if (DEFINED_NAME_REG_EXP.test(t) && t.length <= MAX_PARAMS_COUNT) {\n            controller.setDefineName(controller.getActiveRange().range, t);\n          } else {\n            setValue(displayName);\n          }\n        }\n      },\n      [displayName],\n    );\n    const handleChange = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value);\n      },\n      [],\n    );\n    const handleSelect = useCallback((value: string) => {\n      const range = controller.checkDefineName(value);\n      if (!range) {\n        return;\n      }\n      scrollToView(controller, range!);\n    }, []);\n    return (\n      <SelectList\n        testId=\"formula-bar-name\"\n        value={defineName}\n        data={popupList}\n        onChange={handleSelect}\n        className={styles['defined-name']}\n      >\n        <input\n          value={value}\n          ref={ref}\n          spellCheck\n          type=\"text\"\n          onChange={handleChange}\n          className={styles['defined-name-editor']}\n          onKeyDown={handleKeyDown}\n          maxLength={MAX_NAME_LENGTH * 8}\n          data-testid=\"formula-bar-name-input\"\n        />\n      </SelectList>\n    );\n  },\n);\n\nDefineName.displayName = 'DefineName';\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "FormulaBar_default", "formula-bar-wrapper", "defined-name", "defined-name-editor", "formula-bar-editor-wrapper", "formula-bar-value", "wrap", "show", "formula-editor", "edit-cell", "getDisplayStyle", "style", "isFormulaBar", "result", "getEditorStyle", "editorStatus", "cellStyle", "editorStyle", "minRows", "countRows", "count", "TEXTAREA_MAX_ROWS", "MultipleLineEditor", "initValue", "testId", "isMergeCell", "controller", "className", "ref", "rowCount", "setRowCount", "MERGE_CELL_LINE_BREAK", "rows", "onKeyDown", "event", "value", "range", "isMerged", "cellData", "isMergeContent", "LINE_BREAK", "coreStore", "React", "MAX_NAME_LENGTH", "FORMULA_EDITOR_ROLE", "classnames", "FormulaBar_default", "import_react", "DefineName", "controller", "displayName", "defineName", "ref", "value", "setValue", "defineNameList", "defineNameStore", "popupList", "v", "handleKeyDown", "event", "t", "range", "scrollToView", "r", "parseReference", "sheetName", "sheetInfo", "DEFINED_NAME_REG_EXP", "MAX_PARAMS_COUNT", "handleChange", "handleSelect", "React", "SelectList", "FormulaBar_default", "MAX_NAME_LENGTH", "FormulaBarContainer", "controller", "activeCell", "activeCellStore", "cellStyle", "styleStore", "editorStatus", "coreStore", "displayName", "convertToReference", "handleClick", "style", "getDisplayStyle", "React", "FormulaBar_default", "DefineName", "MultipleLineEditor", "getEditorStyle", "classnames", "LINE_BREAK"]
}
