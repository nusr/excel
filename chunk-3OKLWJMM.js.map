{
  "version": 3,
  "sources": ["../src/containers/store/base.ts", "../src/containers/store/sheetList.ts", "../src/containers/store/activeCell.ts", "../src/containers/store/core.ts", "../src/containers/store/fontFamily.ts", "../src/containers/store/floatElement.ts", "../src/containers/store/style.ts", "../src/containers/store/scroll.ts", "../src/containers/store/defineName.ts"],
  "sourcesContent": ["export class BaseStore<T> {\n  private listeners: Set<(state: T, prevState: T) => void> = new Set()\n  private state: T;\n  constructor(initValue: T) {\n    this.state = initValue;\n  }\n  setState = (nextState: T | Partial<T>, replace?: boolean) => {\n    if (Array.isArray(nextState)) {\n      replace = true\n    }\n    // @ts-ignore\n    const check = !replace && nextState && typeof nextState === 'object' && Object.entries(nextState).every(([key, value]) => Object.is(this.state[key], value));\n    if (check) {\n      return check\n    }\n    if (!Object.is(this.state, nextState)) {\n      const previousState = this.state;\n      this.state = (replace ?? (typeof nextState !== 'object' || nextState === null)) ? (nextState as T) : Object.assign({}, this.state, nextState);\n      for (const listener of this.listeners) {\n        listener(this.state, previousState);\n      }\n    }\n  }\n\n  subscribe = (listener: (state: T, prevState: T) => void) => {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  };\n  getSnapshot = (): T => {\n    return this.state;\n  };\n}\n", "import type { WorksheetType } from '@/types';\nimport { BaseStore } from './base';\n\nexport type SheetItem = Required<\n  Pick<WorksheetType, 'sheetId' | 'isHide' | 'name' | 'tabColor'>\n>;\n\nexport const sheetListStore = new BaseStore<SheetItem[]>([]);\n", "import type { CanvasOverlayPosition } from '@/types';\nimport { DEFAULT_POSITION } from '@/util';\nimport { BaseStore } from './base';\n\nexport type CellStoreType = CanvasOverlayPosition & {\n  defineName: string;\n  value: string; // real value\n  displayValue: string; // display value\n  row: number;\n  col: number;\n  rowCount: number;\n  colCount: number;\n};\n\nconst cellData: CellStoreType = {\n  value: '',\n  displayValue: '',\n  row: 0,\n  col: 0,\n  left: DEFAULT_POSITION,\n  top: DEFAULT_POSITION,\n  width: 0,\n  height: 0,\n  defineName: '',\n  rowCount: 1,\n  colCount: 1,\n};\n\nexport const activeCellStore = new BaseStore<CellStoreType>(cellData);\n", "import { BaseStore } from './base';\nimport { EditorStatus } from '@/types';\nexport interface CoreStore {\n  editorStatus: EditorStatus;\n  canRedo: boolean;\n  canUndo: boolean;\n  activeUuid: string;\n  currentSheetId: string;\n}\n\nexport const coreStore = new BaseStore<CoreStore>({\n  editorStatus: EditorStatus.NONE,\n  canRedo: false,\n  canUndo: false,\n  activeUuid: '',\n  currentSheetId: '',\n});\n", "import type { OptionItem } from '@/types';\nimport { BaseStore } from './base';\n\nexport const fontFamilyStore = new BaseStore<OptionItem[]>([]);\n", "import type { DrawingElement } from '@/types';\nimport { BaseStore } from './base';\nexport type FloatElementItem = DrawingElement & {\n  labels: string[];\n  datasets: Array<{ label: string; data: number[] }>;\n  top: number;\n  left: number;\n};\n\nexport const floatElementStore = new BaseStore<FloatElementItem[]>([]);\n", "import {\n  StyleType,\n  EUnderLine,\n  EHorizontalAlign,\n  EVerticalAlign,\n} from '@/types';\nimport { DEFAULT_FONT_SIZE, getThemeColor, DEFAULT_FORMAT_CODE } from '@/util';\nimport { BaseStore } from './base';\n\nexport type StyleStoreType = Omit<StyleType, 'border'> & {\n  isMergeCell: boolean;\n  mergeType: string;\n};\n\nconst cellData: StyleStoreType = {\n  isBold: false,\n  isItalic: false,\n  isStrike: false,\n  fontColor: getThemeColor('contentColor'),\n  fontSize: DEFAULT_FONT_SIZE,\n  fontFamily: '',\n  fillColor: '',\n  isWrapText: false,\n  underline: EUnderLine.NONE,\n  verticalAlign: EVerticalAlign.TOP,\n  horizontalAlign: EHorizontalAlign.LEFT,\n  numberFormat: DEFAULT_FORMAT_CODE,\n  isMergeCell: false,\n  mergeType: '',\n};\n\nexport const styleStore = new BaseStore<StyleStoreType>(cellData);\n", "import { BaseStore } from './base';\n\nexport interface ScrollStore {\n  scrollTop: number;\n  scrollLeft: number;\n  showBottomBar: boolean;\n}\n\nexport const scrollStore = new BaseStore<ScrollStore>({\n  scrollTop: 0,\n  scrollLeft: 0,\n  showBottomBar: false,\n});\n", "import { BaseStore } from './base';\n\nexport const defineNameStore = new BaseStore<string[]>([]);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;gDAAO,IAAMA,EAAN,KAAmB,CAGxB,YAAYC,EAAc,CAF1B,KAAQ,UAAmD,IAAI,IAK/D,cAAW,CAACC,EAA2BC,IAAsB,CACvD,MAAM,QAAQD,CAAS,IACzBC,EAAU,IAGZ,IAAMC,EAAQ,CAACD,GAAWD,GAAa,OAAOA,GAAc,UAAY,OAAO,QAAQA,CAAS,EAAE,MAAM,CAAC,CAACG,EAAKC,CAAK,IAAM,OAAO,GAAG,KAAK,MAAMD,CAAG,EAAGC,CAAK,CAAC,EAC3J,GAAIF,EACF,OAAOA,EAET,GAAI,CAAC,OAAO,GAAG,KAAK,MAAOF,CAAS,EAAG,CACrC,IAAMK,EAAgB,KAAK,MAC3B,KAAK,MAASJ,IAAY,OAAOD,GAAc,UAAYA,IAAc,MAAUA,EAAkB,OAAO,OAAO,CAAC,EAAG,KAAK,MAAOA,CAAS,EAC5I,QAAWM,KAAY,KAAK,UAC1BA,EAAS,KAAK,MAAOD,CAAa,CAEtC,CACF,EAEA,eAAaC,IACX,KAAK,UAAU,IAAIA,CAAQ,EACpB,IAAM,KAAK,UAAU,OAAOA,CAAQ,GAE7C,iBAAc,IACL,KAAK,MAzBZ,KAAK,MAAQP,CACf,CA0BF,ECxBO,IAAMQ,EAAiB,IAAIC,EAAuB,CAAC,CAAC,ECO3D,IAAMC,EAA0B,CAC9B,MAAO,GACP,aAAc,GACd,IAAK,EACL,IAAK,EACL,KAAM,KACN,IAAK,KACL,MAAO,EACP,OAAQ,EACR,WAAY,GACZ,SAAU,EACV,SAAU,CACZ,EAEaC,EAAkB,IAAIC,EAAyBF,CAAQ,EClB7D,IAAMG,EAAY,IAAIC,EAAqB,CAChD,eACA,QAAS,GACT,QAAS,GACT,WAAY,GACZ,eAAgB,EAClB,CAAC,ECbM,IAAMC,EAAkB,IAAIC,EAAwB,CAAC,CAAC,ECMtD,IAAMC,EAAoB,IAAIC,EAA8B,CAAC,CAAC,ECKrE,IAAMC,EAA2B,CAC/B,OAAQ,GACR,SAAU,GACV,SAAU,GACV,UAAWC,EAAc,cAAc,EACvC,SAAU,GACV,WAAY,GACZ,UAAW,GACX,WAAY,GACZ,YACA,gBACA,kBACA,aAAcC,EACd,YAAa,GACb,UAAW,EACb,EAEaC,EAAa,IAAIC,EAA0BJ,CAAQ,ECvBzD,IAAMK,EAAc,IAAIC,EAAuB,CACpD,UAAW,EACX,WAAY,EACZ,cAAe,EACjB,CAAC,ECVM,IAAMC,EAAkB,IAAIC,EAAoB,CAAC,CAAC",
  "names": ["BaseStore", "initValue", "nextState", "replace", "check", "key", "value", "previousState", "listener", "sheetListStore", "BaseStore", "cellData", "activeCellStore", "BaseStore", "coreStore", "BaseStore", "fontFamilyStore", "BaseStore", "floatElementStore", "BaseStore", "cellData", "getThemeColor", "DEFAULT_FORMAT_CODE", "styleStore", "BaseStore", "scrollStore", "BaseStore", "defineNameStore", "BaseStore"]
}
