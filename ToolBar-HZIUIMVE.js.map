{
  "version": 3,
  "sources": ["../src/containers/ToolBar/index.tsx", "../src/containers/ToolBar/index.module.css", "../src/containers/FloatElement/Toolbar.tsx", "../src/containers/ToolBar/Border.tsx", "../src/containers/ToolBar/Border.module.css"],
  "sourcesContent": ["import React, { useSyncExternalStore, useMemo, memo, useCallback } from 'react';\nimport {\n  Icon,\n  Button,\n  Github,\n  Select,\n  FillColorIcon,\n  ColorPicker,\n  SelectList,\n} from '../../components';\nimport {\n  FONT_SIZE_LIST,\n  QUERY_ALL_LOCAL_FONT,\n  LOCAL_FONT_KEY,\n  isSupportFontFamily,\n  numberFormatOptionList,\n} from '@/util';\nimport {\n  EUnderLine,\n  OptionItem,\n  IController,\n  EMergeCellType,\n  EHorizontalAlign,\n  EVerticalAlign,\n} from '@/types';\nimport styles from './index.module.css';\nimport { fontFamilyStore, styleStore, coreStore } from '@/containers/store';\nimport { InsertFloatingPicture, InsertChart } from '../FloatElement/Toolbar';\nimport { $ } from '@/i18n';\nimport { BorderToolBar } from './Border';\n\ninterface Props {\n  controller: IController;\n}\n\nconst underlineOptionList: OptionItem[] = [\n  {\n    value: EUnderLine.NONE,\n    label: $('none'),\n    disabled: false,\n  },\n  {\n    value: EUnderLine.SINGLE,\n    label: $('single-underline'),\n    disabled: false,\n  },\n  {\n    value: EUnderLine.DOUBLE,\n    label: $('double-underline'),\n    disabled: false,\n  },\n];\n\nconst mergeOptionList: OptionItem[] = [\n  {\n    value: EMergeCellType.MERGE_CENTER,\n    label: $('merge-and-center'),\n    disabled: false,\n  },\n  {\n    value: EMergeCellType.MERGE_CELL,\n    label: $('merge-cells'),\n    disabled: false,\n  },\n  {\n    value: EMergeCellType.MERGE_CONTENT,\n    label: $('merge-content'),\n    disabled: false,\n  },\n];\n\nexport const ToolbarContainer: React.FunctionComponent<Props> = memo(\n  ({ controller }) => {\n    const coreData = useSyncExternalStore(\n      coreStore.subscribe,\n      coreStore.getSnapshot,\n    );\n    const cellStyle = useSyncExternalStore(\n      styleStore.subscribe,\n      styleStore.getSnapshot,\n    );\n    const fontFamilyList = useSyncExternalStore(\n      fontFamilyStore.subscribe,\n      fontFamilyStore.getSnapshot,\n    );\n\n    const fillStyle = useMemo(() => {\n      return { color: cellStyle.fillColor };\n    }, [cellStyle.fillColor]);\n    const fontStyle = useMemo(() => {\n      return { color: cellStyle.fontColor };\n    }, [cellStyle.fontColor]);\n    const [numberFormatLabel, numberFormatValue] = useMemo(() => {\n      let item: OptionItem = numberFormatOptionList[0];\n      if (cellStyle.numberFormat) {\n        const t = numberFormatOptionList.find(\n          (v) => v.value === cellStyle.numberFormat,\n        );\n        if (t) {\n          item = t;\n        } else {\n          item = numberFormatOptionList[numberFormatOptionList.length - 1];\n        }\n      }\n      return [item.label, String(item.value)];\n    }, [cellStyle.numberFormat]);\n    const getItemStyle = useCallback(\n      (value: string | number): React.CSSProperties => {\n        return {\n          fontFamily: String(value),\n        };\n      },\n      [],\n    );\n    const handleFontFamilyChange = useCallback((value: string | number) => {\n      if (\n        String(value) === QUERY_ALL_LOCAL_FONT &&\n        typeof window.queryLocalFonts === 'function'\n      ) {\n        window.queryLocalFonts().then((list) => {\n          let fontList = list.map((v) => v.fullName);\n          fontList = Array.from(new Set(fontList)).filter((v) =>\n            isSupportFontFamily(v),\n          );\n          fontList.sort((a, b) => a.localeCompare(b));\n          const l = fontList.map((v) => ({\n            label: v,\n            value: v,\n            disabled: false,\n          }));\n          if (fontList.length > 0) {\n            fontFamilyStore.setState(l);\n            localStorage.setItem(LOCAL_FONT_KEY, JSON.stringify(fontList));\n          } else {\n            fontFamilyStore.setState(fontFamilyStore\n                .getSnapshot()\n                .filter((v) => v.value !== QUERY_ALL_LOCAL_FONT));\n          }\n        });\n      } else {\n        controller.updateCellStyle(\n          { fontFamily: String(value) },\n          controller.getActiveRange().range,\n        );\n      }\n    }, []);\n    const undo = useCallback(() => {\n      controller.undo();\n    }, []);\n    const redo = useCallback(() => {\n      controller.redo();\n    }, []);\n    const copy = useCallback(() => {\n      controller.copy();\n    }, []);\n    const cut = useCallback(() => {\n      controller.cut();\n    }, []);\n    const paste = useCallback(() => {\n      controller.paste();\n    }, []);\n    const setFontSize = useCallback((value: string | number) => {\n      controller.updateCellStyle(\n        { fontSize: Number(value) },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const toggleBold = useCallback(() => {\n      controller.updateCellStyle(\n        { isBold: !cellStyle.isBold },\n        controller.getActiveRange().range,\n      );\n    }, [cellStyle.isBold]);\n    const toggleItalic = useCallback(() => {\n      controller.updateCellStyle(\n        { isItalic: !cellStyle.isItalic },\n        controller.getActiveRange().range,\n      );\n    }, [cellStyle.isItalic]);\n    const toggleStrike = useCallback(() => {\n      controller.updateCellStyle(\n        { isStrike: !cellStyle.isStrike },\n        controller.getActiveRange().range,\n      );\n    }, [cellStyle.isStrike]);\n    const setUnderline = useCallback((value: string | number) => {\n      const t = Number(value);\n      let underline = EUnderLine.NONE;\n      if (t === EUnderLine.SINGLE) {\n        underline = EUnderLine.SINGLE;\n      } else if (t === EUnderLine.DOUBLE) {\n        underline = EUnderLine.DOUBLE;\n      }\n      controller.updateCellStyle(\n        { underline },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const setFillColor = useCallback((value: string) => {\n      controller.updateCellStyle(\n        { fillColor: value },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const setFontColor = useCallback((value: string) => {\n      controller.updateCellStyle(\n        { fontColor: value },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const toggleWrapText = useCallback(() => {\n      controller.updateCellStyle(\n        { isWrapText: !cellStyle.isWrapText },\n        controller.getActiveRange().range,\n      );\n    }, [cellStyle.isWrapText]);\n    const toggleMergeCell = useCallback(() => {\n      const { range, isMerged } = controller.getActiveRange();\n      if (isMerged) {\n        controller.deleteMergeCell(range);\n      } else {\n        controller.addMergeCell(range);\n      }\n    }, []);\n    const handleMergeCell = useCallback((value: string) => {\n      if (!value) {\n        return;\n      }\n      const { range, isMerged } = controller.getActiveRange();\n      if (isMerged) {\n        controller.deleteMergeCell(range);\n      } else {\n        controller.addMergeCell(range, Number(value));\n      }\n    }, []);\n    const handleNumberFormat = useCallback((value: string) => {\n      if (!value) {\n        return;\n      }\n      controller.updateCellStyle(\n        { numberFormat: value },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const horizontalLeft = useCallback(() => {\n      controller.updateCellStyle(\n        { horizontalAlign: EHorizontalAlign.LEFT },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const horizontalCenter = useCallback(() => {\n      controller.updateCellStyle(\n        { horizontalAlign: EHorizontalAlign.CENTER },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const horizontalRight = useCallback(() => {\n      controller.updateCellStyle(\n        { horizontalAlign: EHorizontalAlign.RIGHT },\n        controller.getActiveRange().range,\n      );\n    }, []);\n\n    const verticalTop = useCallback(() => {\n      controller.updateCellStyle(\n        { verticalAlign: EVerticalAlign.TOP },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const verticalMiddle = useCallback(() => {\n      controller.updateCellStyle(\n        { verticalAlign: EVerticalAlign.MIDDLE },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    const verticalBottom = useCallback(() => {\n      controller.updateCellStyle(\n        { verticalAlign: EVerticalAlign.BOTTOM },\n        controller.getActiveRange().range,\n      );\n    }, []);\n    return (\n      <div className={styles['toolbar-wrapper']} data-testid=\"toolbar\">\n        <Button\n          disabled={!coreData.canUndo}\n          onClick={undo}\n          testId=\"toolbar-undo\"\n          title=\"Undo\"\n          className={styles['icon-center']}\n        >\n          <Icon name=\"undo\" />\n        </Button>\n        <Button\n          disabled={!coreData.canRedo}\n          onClick={redo}\n          testId=\"toolbar-redo\"\n          title=\"Redo\"\n          className={styles['icon-center']}\n        >\n          <Icon name=\"redo\" />\n        </Button>\n        <Button onClick={copy} testId=\"toolbar-copy\" title=\"Copy\">\n          {$('copy')}\n        </Button>\n        <Button onClick={cut} testId=\"toolbar-cut\" title=\"Cut\">\n          {$('cut')}\n        </Button>\n        <Button onClick={paste} testId=\"toolbar-paste\" title=\"Paste\">\n          {$('paste')}\n        </Button>\n\n        <Select\n          data={fontFamilyList}\n          value={cellStyle.fontFamily}\n          getItemStyle={getItemStyle}\n          onChange={handleFontFamilyChange}\n          testId=\"toolbar-font-family\"\n          className={styles.fontFamily}\n        />\n        <Select\n          data={FONT_SIZE_LIST}\n          value={cellStyle.fontSize}\n          onChange={setFontSize}\n          testId=\"toolbar-font-size\"\n        />\n        <Button\n          active={cellStyle.isBold}\n          onClick={toggleBold}\n          testId=\"toolbar-bold\"\n          title=\"Bold\"\n        >\n          <span className={styles.bold}>B</span>\n        </Button>\n        <Button\n          active={cellStyle.isItalic}\n          onClick={toggleItalic}\n          testId=\"toolbar-italic\"\n          title=\"Italic\"\n        >\n          <span className={styles.italic}>I</span>\n        </Button>\n        <Button\n          active={cellStyle.isStrike}\n          onClick={toggleStrike}\n          testId=\"toolbar-strike\"\n          title=\"Strike\"\n        >\n          <span className={styles.strike}>A</span>\n        </Button>\n        <Select\n          data={underlineOptionList}\n          value={cellStyle.underline}\n          title=\"Underline\"\n          onChange={setUnderline}\n          testId=\"toolbar-underline\"\n        />\n        <BorderToolBar controller={controller} />\n        <ColorPicker\n          key=\"fill-color\"\n          color={cellStyle.fillColor}\n          onChange={setFillColor}\n          testId=\"toolbar-fill-color\"\n        >\n          <Button\n            style={fillStyle}\n            testId=\"toolbar-fill-color\"\n            className={styles['icon-center']}\n            title=\"Fill Color\"\n          >\n            <FillColorIcon />\n          </Button>\n        </ColorPicker>\n\n        <ColorPicker\n          key=\"font-color\"\n          color={cellStyle.fontColor}\n          onChange={setFontColor}\n          testId=\"toolbar-font-color\"\n        >\n          <Button\n            style={fontStyle}\n            testId=\"toolbar-font-color\"\n            className={styles['icon-center']}\n            title=\"Font Color\"\n          >\n            <Icon name=\"fontColor\" />\n          </Button>\n        </ColorPicker>\n        <Button\n          active={cellStyle.verticalAlign === EVerticalAlign.TOP}\n          onClick={verticalTop}\n          testId=\"toolbar-vertical-top\"\n          className={styles['icon-center']}\n          title=\"Top Align\"\n        >\n          <Icon name=\"verticalTop\" />\n        </Button>\n        <Button\n          active={cellStyle.verticalAlign === EVerticalAlign.MIDDLE}\n          onClick={verticalMiddle}\n          testId=\"toolbar-vertical-middle\"\n          className={styles['icon-center']}\n          title=\"Middle Align\"\n        >\n          <Icon name=\"verticalMiddle\" />\n        </Button>\n        <Button\n          active={cellStyle.verticalAlign === EVerticalAlign.BOTTOM}\n          onClick={verticalBottom}\n          testId=\"toolbar-vertical-bottom\"\n          className={styles['icon-center']}\n          title=\"Bottom Align\"\n        >\n          <Icon name=\"verticalBottom\" />\n        </Button>\n        <Button\n          active={cellStyle.horizontalAlign === EHorizontalAlign.LEFT}\n          onClick={horizontalLeft}\n          testId=\"toolbar-horizontal-left\"\n          className={styles['icon-center']}\n          title=\"Align Text Left\"\n        >\n          <Icon name=\"horizontalLeft\" />\n        </Button>\n        <Button\n          active={cellStyle.horizontalAlign === EHorizontalAlign.CENTER}\n          onClick={horizontalCenter}\n          testId=\"toolbar-horizontal-center\"\n          className={styles['icon-center']}\n          title=\"Align Text Center\"\n        >\n          <Icon name=\"horizontalCenter\" />\n        </Button>\n        <Button\n          active={cellStyle.horizontalAlign === EHorizontalAlign.RIGHT}\n          onClick={horizontalRight}\n          testId=\"toolbar-horizontal-right\"\n          className={styles['icon-center']}\n          title=\"Align Text Right\"\n        >\n          <Icon name=\"horizontalRight\" />\n        </Button>\n        <Button\n          active={cellStyle.isWrapText}\n          onClick={toggleWrapText}\n          testId=\"toolbar-wrap-text\"\n          className={styles['wrap-text']}\n          title=\"Wrap Text\"\n        >\n          {$('wrap-text')}\n        </Button>\n        <SelectList\n          data={mergeOptionList}\n          value={cellStyle.mergeType}\n          onChange={handleMergeCell}\n          className={styles['merge-cell']}\n          testId=\"toolbar-merge-cell-select\"\n        >\n          <Button\n            active={cellStyle.isMergeCell}\n            onClick={toggleMergeCell}\n            testId=\"toolbar-merge-cell\"\n            className={styles['merge-cell-button']}\n            type=\"plain\"\n            title=\"Merge And Center\"\n          >\n            {$('merge-and-center')}\n          </Button>\n        </SelectList>\n        <SelectList\n          data={numberFormatOptionList}\n          value={numberFormatValue}\n          onChange={handleNumberFormat}\n          className={styles['number-format']}\n          testId=\"toolbar-number-format\"\n        >\n          <div\n            className={styles['number-format-value']}\n            data-testid=\"toolbar-number-format-value\"\n          >\n            {numberFormatLabel}\n          </div>\n        </SelectList>\n        <InsertFloatingPicture controller={controller} />\n        <InsertChart controller={controller} />\n        <Github />\n      </div>\n    );\n  },\n);\n\nToolbarContainer.displayName = 'ToolbarContainer';\n\nexport default ToolbarContainer\n", ".toolbar-wrapper {\n  padding: var(--mediumPadding) var(--largePadding) 0 var(--largePadding);\n  box-sizing: border-box;\n  border-bottom: 1px solid var(--borderColor);\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.toolbar-wrapper > * {\n  margin-right: 8px;\n  margin-bottom: var(--mediumPadding);\n}\n.toolbar-wrapper .merge-cell {\n  height: unset;\n  width: 150px;\n}\n.toolbar-wrapper .border {\n  height: unset;\n  width: 150px;\n}\n.toolbar-wrapper .merge-cell-button {\n  margin-right: 20px;\n  flex: 1;\n  border-radius: unset;\n}\n.toolbar-wrapper .number-format {\n  height: unset;\n  width: 170px;\n}\n.number-format-value {\n  text-align: center;\n  width: 100%;\n  margin-right: 20px;\n}\n.fontFamily {\n  max-width: 200px;\n}\n.bold {\n  font-weight: bold;\n}\n.italic {\n  font-style: italic;\n}\n.strike {\n  text-decoration-line: line-through;\n}\n\n.wrap-text {\n  text-wrap: nowrap;\n}\n\n.icon-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n", "import React, { useRef, memo, useCallback } from 'react';\nimport { IController } from '@/types';\nimport { Button } from '../../components';\nimport { generateUUID, getImageSize, convertFileToTextOrBase64 } from '@/util';\nimport { $ } from '@/i18n';\n\ninterface Props {\n  controller: IController;\n}\n\nexport const InsertFloatingPicture: React.FunctionComponent<Props> = memo(\n  ({ controller }) => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    const handleImport = useCallback(\n      async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (!file) {\n          return;\n        }\n        let fileName = file.name;\n        const fileType = file.type.slice('image/'.length);\n        fileName = fileName.slice(0, -(fileType.length + 1));\n\n        const base64 = await convertFileToTextOrBase64(file, true);\n        if (ref.current) {\n          ref.current.value = '';\n          ref.current.blur();\n        }\n        if (!base64) {\n          return;\n        }\n        const size = await getImageSize(base64);\n        const range = controller.getActiveRange().range;\n        await controller.addDrawing({\n          width: size.width,\n          height: size.height,\n          originHeight: size.height,\n          originWidth: size.width,\n          title: fileName,\n          type: 'floating-picture',\n          uuid: generateUUID(),\n          imageSrc: base64,\n          sheetId: range.sheetId,\n          fromRow: range.row,\n          fromCol: range.col,\n          marginX: 0,\n          marginY: 0,\n        });\n      },\n      [],\n    );\n    return (\n      <Button testId=\"toolbar-floating-picture\" title=\"Floating Picture\">\n        <input\n          type=\"file\"\n          hidden\n          onChange={handleImport}\n          accept=\"image/*\"\n          ref={ref}\n          id=\"upload_float_image\"\n          data-testid=\"toolbar-floating-picture-input\"\n        />\n        <label htmlFor=\"upload_float_image\">{$('floating-picture')}</label>\n      </Button>\n    );\n  },\n);\nInsertFloatingPicture.displayName = 'InsertFloatingPicture';\n\nexport const InsertChart: React.FunctionComponent<Props> = memo(\n  ({ controller }) => {\n    const handleClick = useCallback(async () => {\n      const range = controller.getActiveRange().range;\n      await controller.addDrawing({\n        width: 400,\n        height: 300,\n        originHeight: 300,\n        originWidth: 400,\n        title: $('chart-title'),\n        type: 'chart',\n        uuid: generateUUID(),\n        sheetId: range.sheetId,\n        fromRow: range.row,\n        fromCol: range.col,\n        chartRange: range,\n        chartType: 'line',\n        marginX: 0,\n        marginY: 0,\n      });\n    }, []);\n\n    return (\n      <Button testId=\"toolbar-chart\" onClick={handleClick} title=\"Chart\">\n        {$('chart')}\n      </Button>\n    );\n  },\n);\n\nInsertChart.displayName = 'InsertChart';\n", "import React, { FunctionComponent, memo, useState, useRef } from 'react';\nimport styles from './Border.module.css';\nimport {\n  Button,\n  Icon,\n  Menu,\n  MenuItem,\n  SubMenu,\n  ColorPicker,\n} from '../../components';\nimport { IController, BorderType, BorderItem, IRange } from '@/types';\nimport { BORDER_TYPE_MAP, isRow, isCol } from '@/util';\nimport { $ } from '@/i18n';\n\ninterface BorderToolBarProps {\n  controller: IController;\n}\n\ntype ShortCutType =\n  | 'no-border'\n  | 'all-borders'\n  | 'outside-borders'\n  | 'thick-box-border'\n  | 'bottom-border'\n  | 'top-border'\n  | 'left-border'\n  | 'right-border';\n\nexport const BorderToolBar: FunctionComponent<BorderToolBarProps> = memo(\n  ({ controller }) => {\n    const [color, setColor] = useState('');\n    const [borderType, setBorderType] = useState<BorderType>('thin');\n    const [type, setType] = useState<ShortCutType>('all-borders');\n    const state = useRef({ color, borderType, type });\n    const getBorderItem = () => {\n      const item: BorderItem = {\n        color: state.current.color,\n        type: state.current.borderType,\n      };\n      return item;\n    };\n    const handleAllBorders = () => {\n      setType('all-borders');\n      const item = getBorderItem();\n      controller.updateCellStyle(\n        {\n          borderLeft: item,\n          borderRight: item,\n          borderTop: item,\n          borderBottom: item,\n        },\n        controller.getActiveRange().range,\n      );\n    };\n    const handleColorChange = (c: string) => {\n      state.current.color = c;\n      setColor(c);\n      handleAllBorders();\n    };\n    const handleBorderStyle = (t: BorderType) => {\n      state.current.borderType = t;\n      setBorderType(t);\n      handleAllBorders();\n    };\n\n    const handleNoBorder = () => {\n      setType('no-border');\n      controller.updateCellStyle(\n        {\n          borderLeft: undefined,\n          borderRight: undefined,\n          borderTop: undefined,\n          borderBottom: undefined,\n        },\n        controller.getActiveRange().range,\n      );\n    };\n    const handleBottomBorder = () => {\n      setType('bottom-border');\n      const range = controller.getActiveRange().range;\n      const item = getBorderItem();\n      const { row, col, colCount, rowCount } = range;\n      controller.updateCellStyle(\n        {\n          borderBottom: item,\n        },\n        {\n          row: row + rowCount - 1,\n          rowCount: 1,\n          colCount,\n          col: isRow(range) ? 0 : col,\n          sheetId: '',\n        },\n      );\n    };\n    const handleTopBorder = () => {\n      setType('top-border');\n      const range = controller.getActiveRange().range;\n      const item = getBorderItem();\n      const { row, col, colCount } = range;\n      const cell: IRange = {\n        row,\n        rowCount: 1,\n        colCount,\n        col: isRow(range) ? 0 : col,\n        sheetId: '',\n      };\n      controller.updateCellStyle(\n        {\n          borderTop: item,\n        },\n        cell,\n      );\n    };\n    const handleLeftBorder = () => {\n      setType('left-border');\n      const range = controller.getActiveRange().range;\n      const item = getBorderItem();\n      const { row, col, rowCount } = range;\n      controller.updateCellStyle(\n        {\n          borderLeft: item,\n        },\n        {\n          row: isCol(range) ? 0 : row,\n          rowCount,\n          colCount: 1,\n          col,\n          sheetId: '',\n        },\n      );\n    };\n    const handleRightBorder = () => {\n      setType('right-border');\n      const range = controller.getActiveRange().range;\n      const item = getBorderItem();\n      const { row, col, rowCount, colCount } = range;\n      controller.updateCellStyle(\n        {\n          borderRight: item,\n        },\n        {\n          row: isCol(range) ? 0 : row,\n          rowCount,\n          colCount: 1,\n          col: col + colCount - 1,\n          sheetId: '',\n        },\n      );\n    };\n    const handleOutSideBorders = () => {\n      handleTopBorder();\n      handleRightBorder();\n      handleBottomBorder();\n      handleLeftBorder();\n      setType('outside-borders');\n    };\n    const handleThickBoxBorder = () => {\n      const oldType = state.current.borderType;\n      state.current.borderType = 'medium';\n      handleOutSideBorders();\n      state.current.borderType = oldType;\n      setType('thick-box-border');\n    };\n    const handleShortCut = () => {\n      const record: Record<ShortCutType, () => void> = {\n        'all-borders': handleAllBorders,\n        'no-border': handleNoBorder,\n        'bottom-border': handleBottomBorder,\n        'top-border': handleTopBorder,\n        'left-border': handleLeftBorder,\n        'right-border': handleRightBorder,\n        'thick-box-border': handleThickBoxBorder,\n        'outside-borders': handleOutSideBorders,\n      };\n      record[type]();\n    };\n    return (\n      <div className={styles['container']}>\n        <Button\n          onClick={handleShortCut}\n          type=\"plain\"\n          className={styles['main']}\n          testId=\"toolbar-border-shortcut\"\n          title={$(type)}\n        >\n          {$(type)}\n        </Button>\n        <Menu\n          className={styles['menu']}\n          label={<Icon name=\"down\"></Icon>}\n          isPlain={true}\n          testId=\"toolbar-border\"\n          position=\"bottom\"\n          size=\"small\"\n          portalClassName={styles.portal}\n        >\n          <MenuItem onClick={handleNoBorder} testId=\"toolbar-no-border\">\n            {$('no-border')}\n          </MenuItem>\n          <MenuItem onClick={handleAllBorders} testId=\"toolbar-all-borders\">\n            {$('all-borders')}\n          </MenuItem>\n          <MenuItem\n            onClick={handleOutSideBorders}\n            testId=\"toolbar-outside-borders\"\n          >\n            {$('outside-borders')}\n          </MenuItem>\n          <MenuItem\n            onClick={handleThickBoxBorder}\n            testId=\"toolbar-thick-box-border\"\n          >\n            {$('thick-box-border')}\n          </MenuItem>\n          <MenuItem onClick={handleBottomBorder} testId=\"toolbar-bottom-border\">\n            {$('bottom-border')}\n          </MenuItem>\n          <MenuItem onClick={handleTopBorder} testId=\"toolbar-top-border\">\n            {$('top-border')}\n          </MenuItem>\n          <MenuItem onClick={handleLeftBorder} testId=\"toolbar-left-border\">\n            {$('left-border')}\n          </MenuItem>\n          <MenuItem onClick={handleRightBorder} testId=\"toolbar-right-border\">\n            {$('right-border')}\n          </MenuItem>\n          <MenuItem>\n            <ColorPicker\n              color={color}\n              onChange={handleColorChange}\n              position=\"right\"\n              testId=\"toolbar-border-color\"\n            >\n              <span style={{ color }}>{$('line-color')} &gt;</span>\n            </ColorPicker>\n          </MenuItem>\n          <SubMenu label={`${$('line-style')} >`} testId=\"toolbar-border-style\">\n            {Object.keys(BORDER_TYPE_MAP).map((border) => (\n              <MenuItem\n                key={border}\n                onClick={() => handleBorderStyle(border as BorderType)}\n                testId={`toolbar-border-style-${border}`}\n                active={borderType === border}\n              >\n                {border}\n              </MenuItem>\n            ))}\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  },\n);\nBorderToolBar.displayName = 'BorderToolBar';\n", ".container {\n  display: flex;\n  align-items: center;\n  position: relative;\n  border: 1px solid var(--borderColor);\n  width: 150px;\n}\n\n.container .trigger {\n  border-left: 1px solid var(--borderColor);\n  height: 100%;\n  width: 20px;\n}\n.container .main {\n  flex: 1;\n  text-align: center;\n}\n\n.container .menu {\n  height: 100%;\n  border-left: 1px solid var(--borderColor);\n}\n\n.container .menu .portal {\n  width: 150px;\n}\n"],
  "mappings": "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",
  "names": ["import_react", "ToolBar_default", "toolbar-wrapper", "merge-cell", "border", "merge-cell-button", "number-format", "number-format-value", "fontFamily", "bold", "italic", "strike", "wrap-text", "icon-center", "import_react", "InsertFloatingPicture", "controller", "ref", "handleImport", "event", "file", "fileName", "fileType", "base64", "convertFileToTextOrBase64", "size", "getImageSize", "range", "generateUUID", "React", "Button", "$", "InsertChart", "handleClick", "import_react", "Border_default", "container", "trigger", "main", "menu", "portal", "BorderToolBar", "controller", "color", "setColor", "borderType", "setBorderType", "type", "setType", "state", "getBorderItem", "handleAllBorders", "item", "handleColorChange", "c", "handleBorderStyle", "t", "handleNoBorder", "handleBottomBorder", "range", "row", "col", "colCount", "rowCount", "isRow", "handleTopBorder", "cell", "handleLeftBorder", "isCol", "handleRightBorder", "handleOutSideBorders", "handleThickBoxBorder", "oldType", "handleShortCut", "React", "Border_default", "Button", "$", "Menu", "Icon", "MenuItem", "ColorPicker", "SubMenu", "BORDER_TYPE_MAP", "border", "underlineOptionList", "$", "mergeOptionList", "ToolbarContainer", "controller", "coreData", "coreStore", "cellStyle", "styleStore", "fontFamilyList", "fontFamilyStore", "fillStyle", "fontStyle", "numberFormatLabel", "numberFormatValue", "item", "numberFormatOptionList", "t", "v", "getItemStyle", "value", "handleFontFamilyChange", "QUERY_ALL_LOCAL_FONT", "list", "fontList", "isSupportFontFamily", "a", "b", "l", "LOCAL_FONT_KEY", "undo", "redo", "copy", "cut", "paste", "setFontSize", "toggleBold", "toggleItalic", "toggleStrike", "setUnderline", "underline", "setFillColor", "setFontColor", "toggleWrapText", "toggleMergeCell", "range", "isMerged", "handleMergeCell", "handleNumberFormat", "horizontalLeft", "horizontalCenter", "horizontalRight", "verticalTop", "verticalMiddle", "verticalBottom", "React", "ToolBar_default", "Button", "Icon", "Select", "FONT_SIZE_LIST", "BorderToolBar", "ColorPicker", "FillColorIcon", "SelectList", "InsertFloatingPicture", "InsertChart", "Github"]
}
