{
  "version": 3,
  "sources": ["../src/containers/canvas/isSupportFontFamily.ts"],
  "sourcesContent": ["import {\n  MUST_FONT_FAMILY,\n  FONT_FAMILY_LIST,\n  LOCAL_FONT_KEY,\n  QUERY_ALL_LOCAL_FONT,\n} from '@/util';\nimport { OptionItem } from '@/types';\nimport { $ } from '@/i18n';\n\nfunction createElement(font: string) {\n  const s = document.createElement('span');\n  s.style.fontSize = '72px';\n  s.innerHTML = 'mmmmmmmmmmlli';\n  s.style.fontFamily = font;\n  document.body.appendChild(s);\n  const { offsetWidth, offsetHeight } = s;\n  document.body.removeChild(s);\n  return {\n    offsetHeight,\n    offsetWidth,\n  };\n}\n\nfunction SupportFontFamilyFactory() {\n  const baseFonts = [MUST_FONT_FAMILY, 'serif'];\n  const defaultWidth: Record<string, number> = {};\n  const defaultHeight: Record<string, number> = {};\n  for (const item of baseFonts) {\n    const { offsetWidth, offsetHeight } = createElement(item);\n    defaultWidth[item] = offsetWidth;\n    defaultHeight[item] = offsetHeight;\n  }\n\n  function detect(font: string): boolean {\n    for (const item of baseFonts) {\n      const { offsetWidth, offsetHeight } = createElement(font + ',' + item);\n      if (\n        offsetWidth !== defaultWidth[item] ||\n        offsetHeight !== defaultHeight[item]\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  return detect;\n}\n\nconst isSupportFontFamily = SupportFontFamilyFactory();\nexport { isSupportFontFamily };\n\nexport function initFontFamilyList(\n  check = isSupportFontFamily,\n  fontList = FONT_FAMILY_LIST,\n): OptionItem[] {\n  const cacheFont = localStorage.getItem(LOCAL_FONT_KEY);\n  if (cacheFont) {\n    const list = JSON.parse(cacheFont) as string[];\n    if (list.length > 0) {\n      return list.map((v) => ({ value: v, label: v, disabled: false }));\n    }\n  }\n  const list: OptionItem[] = [];\n  for (const item of fontList) {\n    if (check(item)) {\n      list.push({\n        label: item,\n        value: item,\n        disabled: false,\n      });\n    }\n  }\n\n  if (typeof window.queryLocalFonts === 'function') {\n    list.push({\n      value: QUERY_ALL_LOCAL_FONT,\n      label: $('get-all-installed-fonts'),\n      disabled: false,\n    });\n  }\n  return list;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;wEASA,SAASA,EAAcC,EAAc,CACnC,IAAMC,EAAI,SAAS,cAAc,MAAM,EACvCA,EAAE,MAAM,SAAW,OACnBA,EAAE,UAAY,gBACdA,EAAE,MAAM,WAAaD,EACrB,SAAS,KAAK,YAAYC,CAAC,EAC3B,GAAM,CAAE,YAAAC,EAAa,aAAAC,CAAa,EAAIF,EACtC,gBAAS,KAAK,YAAYA,CAAC,EACpB,CACL,aAAAE,EACA,YAAAD,CACF,CACF,CAEA,SAASE,GAA2B,CAClC,IAAMC,EAAY,CAACC,EAAkB,OAAO,EACtCC,EAAuC,CAAC,EACxCC,EAAwC,CAAC,EAC/C,QAAWC,KAAQJ,EAAW,CAC5B,GAAM,CAAE,YAAAH,EAAa,aAAAC,CAAa,EAAIJ,EAAcU,CAAI,EACxDF,EAAaE,CAAI,EAAIP,EACrBM,EAAcC,CAAI,EAAIN,CACxB,CAEA,SAASO,EAAOV,EAAuB,CACrC,QAAWS,KAAQJ,EAAW,CAC5B,GAAM,CAAE,YAAAH,EAAa,aAAAC,CAAa,EAAIJ,EAAcC,EAAO,IAAMS,CAAI,EACrE,GACEP,IAAgBK,EAAaE,CAAI,GACjCN,IAAiBK,EAAcC,CAAI,EAEnC,MAAO,EAEX,CACA,MAAO,EACT,CAEA,OAAOC,CACT,CAEA,IAAMC,EAAsBP,EAAyB,EAG9C,SAASQ,EACdC,EAAQC,EACRC,EAAWC,EACG,CACd,IAAMC,EAAY,aAAa,QAAQC,CAAc,EACrD,GAAID,EAAW,CACb,IAAME,EAAO,KAAK,MAAMF,CAAS,EACjC,GAAIE,EAAK,OAAS,EAChB,OAAOA,EAAK,IAAKC,IAAO,CAAE,MAAOA,EAAG,MAAOA,EAAG,SAAU,EAAM,EAAE,CAEpE,CACA,IAAMD,EAAqB,CAAC,EAC5B,QAAWE,KAAQN,EACbF,EAAMQ,CAAI,GACZF,EAAK,KAAK,CACR,MAAOE,EACP,MAAOA,EACP,SAAU,EACZ,CAAC,EAIL,OAAI,OAAO,OAAO,iBAAoB,YACpCF,EAAK,KAAK,CACR,MAAOG,EACP,MAAOC,EAAE,yBAAyB,EAClC,SAAU,EACZ,CAAC,EAEIJ,CACT",
  "names": ["createElement", "font", "s", "offsetWidth", "offsetHeight", "SupportFontFamilyFactory", "baseFonts", "MUST_FONT_FAMILY", "defaultWidth", "defaultHeight", "item", "detect", "isSupportFontFamily", "initFontFamilyList", "check", "isSupportFontFamily", "fontList", "FONT_FAMILY_LIST", "cacheFont", "LOCAL_FONT_KEY", "list", "v", "item", "QUERY_ALL_LOCAL_FONT", "$"]
}
