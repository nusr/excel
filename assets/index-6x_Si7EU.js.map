{"version":3,"file":"index-6x_Si7EU.js","sources":["../../src/containers/FormulaBar/FormulaEditor.tsx","../../src/containers/FormulaBar/DefineName.tsx","../../src/containers/FormulaBar/index.tsx"],"sourcesContent":["import React, {\n  CSSProperties,\n  memo,\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport { EditorStatus, IController } from '@/types';\nimport styles from './index.module.css';\nimport { CellStoreType, coreStore, StyleStoreType } from '../store';\nimport {\n  MAX_NAME_LENGTH,\n  FORMULA_EDITOR_ROLE,\n  MERGE_CELL_LINE_BREAK,\n  classnames,\n  TEXTAREA_MAX_ROWS,\n  LINE_BREAK,\n  isMergeContent,\n} from '@/util';\n\ninterface MultipleLineEditorProps {\n  isMergeCell: boolean;\n  initValue: string;\n  style: CSSProperties | undefined;\n  testId?: string;\n  controller: IController;\n  className?: string;\n}\nexport function getDisplayStyle(\n  style: StyleStoreType,\n  isFormulaBar = true,\n): CSSProperties {\n  const result: CSSProperties = {};\n  if (style?.isItalic) {\n    result.fontStyle = 'italic';\n  }\n  if (style?.isBold) {\n    result.fontWeight = 'bold';\n  }\n  if (style?.fontFamily) {\n    result.fontFamily = style?.fontFamily;\n  }\n  if (style?.fontSize && !isFormulaBar) {\n    result.fontSize = style?.fontSize;\n  }\n  if (style?.fillColor && !isFormulaBar) {\n    result.backgroundColor = style.fillColor;\n  }\n  if (style?.fontColor && !isFormulaBar) {\n    result.color = style?.fontColor;\n  }\n  if (style?.underline && style?.isStrike) {\n    result.textDecorationLine = 'underline line-through';\n  } else if (style?.underline) {\n    result.textDecorationLine = 'underline';\n  } else if (style?.isStrike) {\n    result.textDecorationLine = 'line-through';\n  }\n  // if (style.underline === EUnderLine.DOUBLE) {\n  //   result.textDecorationStyle = 'double';\n  // }\n  return result;\n}\nexport function getEditorStyle(\n  style: CellStoreType,\n  editorStatus: EditorStatus,\n  cellStyle: StyleStoreType,\n): CSSProperties | undefined {\n  if (editorStatus === EditorStatus.NONE) {\n    return undefined;\n  }\n  const isFormulaBar = editorStatus === EditorStatus.EDIT_FORMULA_BAR;\n\n  const editorStyle: CSSProperties = getDisplayStyle(cellStyle, isFormulaBar);\n  if (isFormulaBar) {\n    return editorStyle;\n  }\n  const result = {\n    ...editorStyle,\n    top: style.top,\n    left: style.left,\n    width: style.width,\n    height: style.height,\n  };\n  return result;\n}\n\nconst minRows = 1;\n\nfunction countRows(count: number) {\n  return Math.max(Math.min(TEXTAREA_MAX_ROWS, count), minRows);\n}\n\nexport const MultipleLineEditor: React.FunctionComponent<MultipleLineEditorProps> =\n  memo(({ initValue, style, testId, isMergeCell, controller, className }) => {\n    const ref = useRef<HTMLTextAreaElement>(null);\n    const [rowCount, setRowCount] = useState(minRows);\n    useEffect(() => {\n      if (isMergeCell) {\n        const count = initValue.split(MERGE_CELL_LINE_BREAK).length;\n        setRowCount(countRows(count));\n      } else {\n        const rows = Math.ceil((ref.current?.scrollHeight || 20) / 20);\n        setRowCount(countRows(rows));\n      }\n    }, [isMergeCell, initValue]);\n    const onKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        event.stopPropagation();\n        if (event.key === 'Enter' || event.key === 'Tab') {\n          let value = event.currentTarget.value;\n          const { range, isMerged } = controller.getActiveRange();\n          const cellData = controller.getCell(range);\n          if (\n            typeof cellData?.value === 'string' &&\n            isMergeContent(isMerged, cellData?.value)\n          ) {\n            value = value.replaceAll(LINE_BREAK, MERGE_CELL_LINE_BREAK);\n          }\n          controller.batchUpdate(() => {\n            controller.setCellValue(value, range);\n            if (event.key === 'Enter') {\n              controller.setNextActiveCell('down');\n            } else {\n              controller.setNextActiveCell('right');\n            }\n            return true;\n          });\n          coreStore.setState({\n            editorStatus: EditorStatus.NONE,\n          });\n          event.currentTarget.value = '';\n          event.currentTarget.blur();\n        } else {\n          const rows = Math.ceil(event.currentTarget.scrollHeight / 20);\n          setRowCount(countRows(rows));\n        }\n      },\n      [],\n    );\n    return (\n      <textarea\n        spellCheck\n        autoFocus\n        ref={ref}\n        style={style}\n        maxLength={MAX_NAME_LENGTH * 100}\n        data-testid={testId}\n        data-role={FORMULA_EDITOR_ROLE}\n        onKeyDown={onKeyDown}\n        className={classnames(styles['formula-editor'], className)}\n        defaultValue={initValue}\n        rows={rowCount}\n      />\n    );\n  });\n\nMultipleLineEditor.displayName = 'MultipleLineEditor';\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  useSyncExternalStore,\n  useMemo,\n  memo,\n  useCallback,\n} from 'react';\nimport { IController } from '@/types';\nimport styles from './index.module.css';\nimport {\n  parseReference,\n  MAX_NAME_LENGTH,\n  MAX_PARAMS_COUNT,\n  DEFINED_NAME_REG_EXP,\n} from '@/util';\nimport { scrollToView } from '@/canvas';\nimport { SelectList } from '../../components';\nimport { defineNameStore } from '../store';\n\ninterface Props {\n  controller: IController;\n  displayName: string;\n  defineName: string;\n}\n\nexport const DefineName: React.FunctionComponent<Props> = memo(\n  ({ controller, displayName, defineName }) => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    const [value, setValue] = useState(displayName);\n    const defineNameList = useSyncExternalStore(\n      defineNameStore.subscribe,\n      defineNameStore.getSnapshot,\n    );\n    const popupList = useMemo(() => {\n      return defineNameList.map((v) => ({\n        disabled: false,\n        value: v,\n        label: v,\n      }));\n    }, [defineNameList]);\n    useEffect(() => {\n      setValue(displayName);\n    }, [displayName]);\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLInputElement>) => {\n        event.stopPropagation();\n        if (event.key === 'Enter') {\n          const t = event.currentTarget.value.trim().toLowerCase();\n          ref.current?.blur();\n          if (!t) {\n            setValue(displayName);\n            return;\n          }\n          const range = controller.checkDefineName(t);\n          if (range) {\n            setValue(displayName);\n            scrollToView(controller, range);\n            return;\n          }\n          const r = parseReference(t, (sheetName: string) => {\n            const list = controller.getSheetList();\n            const item = list.find((v) => v.name === sheetName);\n            return item?.sheetId || '';\n          });\n          const sheetInfo = controller.getSheetInfo(\n            r?.sheetId || controller.getCurrentSheetId(),\n          )!;\n          if (r && r.col < sheetInfo.colCount && r.row < sheetInfo.rowCount) {\n            r.sheetId = r.sheetId || controller.getCurrentSheetId();\n            setValue(displayName);\n            scrollToView(controller, r);\n            return;\n          }\n          if (DEFINED_NAME_REG_EXP.test(t) && t.length <= MAX_PARAMS_COUNT) {\n            controller.setDefineName(controller.getActiveRange().range, t);\n          } else {\n            setValue(displayName);\n          }\n        }\n      },\n      [displayName],\n    );\n    const handleChange = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value);\n      },\n      [],\n    );\n    const handleSelect = useCallback((value: string) => {\n      const range = controller.checkDefineName(value);\n      if (!range) {\n        return;\n      }\n      scrollToView(controller, range!);\n    }, []);\n    return (\n      <SelectList\n        testId=\"formula-bar-name\"\n        value={defineName}\n        data={popupList}\n        onChange={handleSelect}\n        className={styles['defined-name']}\n      >\n        <input\n          value={value}\n          ref={ref}\n          spellCheck\n          type=\"text\"\n          onChange={handleChange}\n          className={styles['defined-name-editor']}\n          onKeyDown={handleKeyDown}\n          maxLength={MAX_NAME_LENGTH * 8}\n          data-testid=\"formula-bar-name-input\"\n        />\n      </SelectList>\n    );\n  },\n);\n\nDefineName.displayName = 'DefineName';\n","import React, { useSyncExternalStore, useMemo, memo, useCallback } from 'react';\nimport {\n  MultipleLineEditor,\n  getEditorStyle,\n  getDisplayStyle,\n} from './FormulaEditor';\nimport { LINE_BREAK, classnames, convertToReference } from '@/util';\nimport styles from './index.module.css';\nimport { IController, EditorStatus } from '@/types';\nimport { activeCellStore, coreStore, styleStore } from '@/containers/store';\nimport { DefineName } from './DefineName';\n\ninterface Props {\n  controller: IController;\n}\n\nexport const FormulaBarContainer: React.FunctionComponent<Props> = memo(\n  ({ controller }) => {\n    const activeCell = useSyncExternalStore(\n      activeCellStore.subscribe,\n      activeCellStore.getSnapshot,\n    );\n    const cellStyle = useSyncExternalStore(\n      styleStore.subscribe,\n      styleStore.getSnapshot,\n    );\n    const { editorStatus } = useSyncExternalStore(\n      coreStore.subscribe,\n      coreStore.getSnapshot,\n    );\n    const displayName = useMemo(() => {\n      return (\n        activeCell.defineName ||\n        convertToReference({\n          row: activeCell.row,\n          col: activeCell.col,\n          rowCount: 1,\n          colCount: 1,\n          sheetId: '',\n        })\n      );\n    }, [activeCell.defineName, activeCell.col, activeCell.row]);\n    const handleClick = useCallback(() => {\n      coreStore.setState({\n        editorStatus: EditorStatus.EDIT_FORMULA_BAR,\n      });\n    }, []);\n    const style = useMemo(() => {\n      return getDisplayStyle(cellStyle);\n    }, [cellStyle]);\n\n    return (\n      <div className={styles['formula-bar-wrapper']} data-testid=\"formula-bar\">\n        <DefineName\n          controller={controller}\n          displayName={displayName}\n          defineName={activeCell.defineName}\n        />\n        <div className={styles['formula-bar-editor-wrapper']}>\n          {editorStatus !== EditorStatus.NONE && (\n            <MultipleLineEditor\n              initValue={activeCell.value}\n              controller={controller}\n              style={getEditorStyle(activeCell, editorStatus, cellStyle)}\n              testId=\"formula-editor\"\n              isMergeCell={cellStyle.isMergeCell}\n              className={\n                editorStatus === EditorStatus.EDIT_CELL\n                  ? styles['edit-cell']\n                  : ''\n              }\n            />\n          )}\n          <div\n            className={classnames(styles['formula-bar-value'], {\n              [styles['show']]: editorStatus !== EditorStatus.EDIT_FORMULA_BAR,\n              [styles['wrap']]:\n                cellStyle.isMergeCell &&\n                activeCell.displayValue.includes(LINE_BREAK),\n            })}\n            style={style}\n            onClick={handleClick}\n            data-testid=\"formula-editor-trigger\"\n          >\n            {activeCell.displayValue}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nFormulaBarContainer.displayName = 'FormulaBarContainer';\n\nexport default FormulaBarContainer\n"],"names":["getDisplayStyle","style","isFormulaBar","result","getEditorStyle","editorStatus","cellStyle","EditorStatus","editorStyle","minRows","countRows","count","TEXTAREA_MAX_ROWS","MultipleLineEditor","memo","initValue","testId","isMergeCell","controller","className","ref","useRef","rowCount","setRowCount","useState","useEffect","MERGE_CELL_LINE_BREAK","rows","_a","onKeyDown","useCallback","event","value","range","isMerged","cellData","isMergeContent","LINE_BREAK","coreStore","jsx","MAX_NAME_LENGTH","FORMULA_EDITOR_ROLE","classnames","styles","DefineName","displayName","defineName","setValue","defineNameList","useSyncExternalStore","defineNameStore","popupList","useMemo","v","handleKeyDown","t","scrollToView","r","parseReference","sheetName","item","sheetInfo","DEFINED_NAME_REG_EXP","MAX_PARAMS_COUNT","handleChange","handleSelect","SelectList","FormulaBarContainer","activeCell","activeCellStore","styleStore","convertToReference","handleClick","jsxs"],"mappings":"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"}