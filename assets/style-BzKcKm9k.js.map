{"version":3,"file":"style-BzKcKm9k.js","sources":["../../src/types/components.ts","../../src/containers/store/base.ts","../../src/containers/store/core.ts","../../src/containers/store/style.ts"],"sourcesContent":["import { ModelCellType, Coordinate } from './model';\nimport type {\n  ChartType,\n  DefaultDataPoint,\n  ChartData,\n  UpdateMode,\n  ChartOptions,\n  Plugin,\n} from 'chart.js';\n\nexport interface OptionItem {\n  value: string | number;\n  label: string;\n  disabled: boolean;\n}\n\nexport interface CanvasOverlayPosition {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n\nexport interface ScrollValue {\n  left: number;\n  top: number;\n  row: number;\n  col: number;\n  scrollLeft: number;\n  scrollTop: number;\n}\n\nexport type ActiveCellType = ModelCellType & Coordinate & CanvasOverlayPosition;\n\nexport type Point = [x: number, y: number];\n\nexport enum ScrollStatus {\n  NONE = 0,\n  VERTICAL,\n  HORIZONTAL,\n}\n\nexport enum EditorStatus {\n  NONE = 0,\n  EDIT_CELL,\n  EDIT_FORMULA_BAR,\n}\n\nexport interface ChartProps<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n> {\n  width: number;\n  height: number;\n  uuid?: string;\n  type: ChartType;\n  data: ChartData<TType, TData, TLabel>;\n  options?: ChartOptions<TType>;\n  plugins?: Plugin<TType>[];\n  redraw?: boolean;\n  updateMode?: UpdateMode;\n}\n\nexport type ThemeType = 'dark' | 'light';","export class BaseStore<T> {\n  private listeners: Set<(state: T, prevState: T) => void> = new Set()\n  private state: T;\n  constructor(initValue: T) {\n    this.state = initValue;\n  }\n  setState = (nextState: T | Partial<T>, replace?: boolean) => {\n    if (Array.isArray(nextState)) {\n      replace = true\n    }\n    // @ts-ignore\n    const check = !replace && nextState && typeof nextState === 'object' && Object.entries(nextState).every(([key, value]) => Object.is(this.state[key], value));\n    if (check) {\n      return check\n    }\n    if (!Object.is(this.state, nextState)) {\n      const previousState = this.state;\n      this.state = (replace ?? (typeof nextState !== 'object' || nextState === null)) ? (nextState as T) : Object.assign({}, this.state, nextState);\n      for (const listener of this.listeners) {\n        listener(this.state, previousState);\n      }\n    }\n  }\n\n  subscribe = (listener: (state: T, prevState: T) => void) => {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  };\n  getSnapshot = (): T => {\n    return this.state;\n  };\n}\n","import { BaseStore } from './base';\nimport { EditorStatus } from '@/types';\nexport interface CoreStore {\n  editorStatus: EditorStatus;\n  canRedo: boolean;\n  canUndo: boolean;\n  activeUuid: string;\n  currentSheetId: string;\n  isFilter: boolean;\n}\n\nexport const coreStore = new BaseStore<CoreStore>({\n  editorStatus: EditorStatus.NONE,\n  canRedo: false,\n  canUndo: false,\n  activeUuid: '',\n  currentSheetId: '',\n  isFilter: false\n});\n","import {\n  StyleType,\n  EUnderLine,\n  EHorizontalAlign,\n  EVerticalAlign,\n} from '@/types';\nimport { DEFAULT_FONT_SIZE, getThemeColor, DEFAULT_FORMAT_CODE } from '@/util';\nimport { BaseStore } from './base';\n\nexport type StyleStoreType = Omit<StyleType, 'border'> & {\n  isMergeCell: boolean;\n  mergeType: string;\n};\n\nconst cellData: StyleStoreType = {\n  isBold: false,\n  isItalic: false,\n  isStrike: false,\n  fontColor: getThemeColor('contentColor'),\n  fontSize: DEFAULT_FONT_SIZE,\n  fontFamily: '',\n  fillColor: '',\n  isWrapText: false,\n  underline: EUnderLine.NONE,\n  verticalAlign: EVerticalAlign.TOP,\n  horizontalAlign: EHorizontalAlign.LEFT,\n  numberFormat: DEFAULT_FORMAT_CODE,\n  isMergeCell: false,\n  mergeType: '',\n};\n\nexport const styleStore = new BaseStore<StyleStoreType>(cellData);\n"],"names":["ScrollStatus","ScrollStatus2","EditorStatus","EditorStatus2","BaseStore","initValue","__publicField","nextState","replace","check","key","value","previousState","listener","coreStore","cellData","getThemeColor","DEFAULT_FONT_SIZE","EUnderLine","EVerticalAlign","EHorizontalAlign","DEFAULT_FORMAT_CODE","styleStore"],"mappings":"+OAoCY,IAAAA,GAAAA,IACVA,EAAAA,EAAA,KAAO,CAAP,EAAA,OACAA,EAAAC,EAAA,SAAA,CAAA,EAAA,WACAD,EAAAC,EAAA,WAAA,CAAA,EAAA,aAHUD,IAAAA,GAAA,CAAA,CAAA,EAMAE,GAAAA,IACVA,EAAAA,EAAA,KAAO,CAAP,EAAA,OACAA,EAAAC,EAAA,UAAA,CAAA,EAAA,YACAD,EAAAC,EAAA,iBAAA,CAAA,EAAA,mBAHUD,IAAAA,GAAA,CAAA,CAAA,EC1CL,MAAME,CAAa,CAGxB,YAAYC,EAAc,CAFlBC,EAAA,qBAAuD,KACvDA,EAAA,cAIRA,EAAA,gBAAW,CAACC,EAA2BC,IAAsB,CACvD,MAAM,QAAQD,CAAS,IACfC,EAAA,IAGN,MAAAC,EAAQ,CAACD,GAAWD,GAAa,OAAOA,GAAc,UAAY,OAAO,QAAQA,CAAS,EAAE,MAAM,CAAC,CAACG,EAAKC,CAAK,IAAM,OAAO,GAAG,KAAK,MAAMD,CAAG,EAAGC,CAAK,CAAC,EAC3J,GAAIF,EACK,OAAAA,EAET,GAAI,CAAC,OAAO,GAAG,KAAK,MAAOF,CAAS,EAAG,CACrC,MAAMK,EAAgB,KAAK,MAC3B,KAAK,MAASJ,IAAY,OAAOD,GAAc,UAAYA,IAAc,MAAUA,EAAkB,OAAO,OAAO,CAAI,EAAA,KAAK,MAAOA,CAAS,EACjI,UAAAM,KAAY,KAAK,UACjBA,EAAA,KAAK,MAAOD,CAAa,CACpC,CAEJ,GAEAN,EAAA,iBAAaO,IACN,KAAA,UAAU,IAAIA,CAAQ,EACpB,IAAM,KAAK,UAAU,OAAOA,CAAQ,IAE7CP,EAAA,mBAAc,IACL,KAAK,OAzBZ,KAAK,MAAQD,CAAA,CA2BjB,CCpBa,MAAAS,EAAY,IAAIV,EAAqB,CAChD,aAAcF,EAAa,KAC3B,QAAS,GACT,QAAS,GACT,WAAY,GACZ,eAAgB,GAChB,SAAU,EACZ,CAAC,ECJKa,EAA2B,CAC/B,OAAQ,GACR,SAAU,GACV,SAAU,GACV,UAAWC,EAAc,cAAc,EACvC,SAAUC,EACV,WAAY,GACZ,UAAW,GACX,WAAY,GACZ,UAAWC,EAAW,KACtB,cAAeC,EAAe,IAC9B,gBAAiBC,EAAiB,KAClC,aAAcC,EACd,YAAa,GACb,UAAW,EACb,EAEaC,EAAa,IAAIlB,EAA0BW,CAAQ"}