import { numberFormat } from '..';


describe('general.test.ts', function () {
  describe('boolean', () => {
    test('ok', () => {
      expect(numberFormat(0, true)).toEqual("TRUE");
      expect(numberFormat(0, false)).toEqual("FALSE");
    })
  })
  describe('null', () => {
    test('ok', () => {
      expect(numberFormat(0, null)).toEqual("");
    })
  })
  describe('undefined', () => {
    test('ok', () => {
      expect(numberFormat(0, undefined)).toEqual("");
    })
  })
  describe('string', () => {
    test('ok', () => {
      expect(numberFormat(0, '')).toEqual("");
      expect(numberFormat(0, 'test')).toEqual("test");
    })
  })
  describe('integer', () => {
    const list: Array<[number, string]> = [
      [1, "1"],
      [10, "10"],
      [100, "100"],
      [1000, "1000"],
      [10000, "10000"],
      [100000, "100000"],
      [1000000, "1000000"],
      [10000000, "10000000"],
      [100000000, "100000000"],
      [1000000000, "1000000000"],
      [10000000000, "10000000000"],
      [100000000000, "1E+11"],
      [1000000000000, "1E+12"],
      [10000000000000, "1E+13"],
      [100000000000000, "1E+14"],

      [1.234567E-14, "1.23457E-14"],
      [1.234567E-13, "1.23457E-13"],
      [1.234567E-12, "1.23457E-12"],
      [1.234567E-11, "1.23457E-11"],
      [1.234567E-10, "1.23457E-10"],
      [1.234567E-9, "1.23457E-09"],
      [1.234567E-8, "1.23457E-08"],
      [1.234567E-7, "1.23457E-07"],
      [1.234567E-6, "1.23457E-06"],
      [1.234567E-5, "1.23457E-05"],
      [1.234567E-4, "0.000123457"],
      [1.234567E-3, "0.001234567"],
      [1.234567E-2, "0.01234567"],
      [1.234567E-1, "0.1234567"],
      [1.234567E0, "1.234567"],
      [1.234567E1, "12.34567"],
      [1.234567E2, "123.4567"],
      [1.234567E3, "1234.567"],
      [1.234567E4, "12345.67"],
      [1.234567E5, "123456.7"],
      [1.234567E6, "1234567"],
      [1.234567E7, "12345670"],
      [1.234567E8, "123456700"],
      [1.234567E9, "1234567000"],
      [1.234567E10, "12345670000"],
      [1.234567E11, "1.23457E+11"],
      [1.234567E12, "1.23457E+12"],
      [1.234567E13, "1.23457E+13"],
      [1.234567E14, "1.23457E+14"],

      [0.00000000000001, "1E-14"],
      [0.0000000000001, "1E-13"],
      [0.000000000001, "1E-12"],
      [0.00000000001, "1E-11"],
      [0.0000000001, "1E-10"],
      [0.000000001, "0.000000001"],
      [0.00000001, "0.00000001"],
      [0.0000001, "0.0000001"],
      [0.000001, "0.000001"],
      [0.00001, "0.00001"],
      [0.0001, "0.0001"],
      [0.001, "0.001"],
      [0.01, "0.01"],
      [0.1, "0.1"],

    ]
    for (const item of list) {
      test(`actual:${item[0]}, expected:${item[1]}`, () => {
        expect(numberFormat(0, item[0])).toEqual(item[1])
      })
    }
  })
  describe.skip('Date', () => {
    it('ok', function () {
      expect(numberFormat(0, new Date(2017, 1, 19))).toEqual("2/19/17");
      expect(numberFormat(0, new Date(2017, 1, 19), { date1904: true })).toEqual("2/19/17");
      expect(numberFormat(0, new Date(1901, 0, 1))).toEqual("1/1/01");
      expect(numberFormat(0, new Date(1901, 0, 1), { date1904: true })).not.toEqual('1/1/01')
      expect(numberFormat(0, new Date(1904, 0, 1))).toEqual("1/1/04");
      expect(numberFormat(0, new Date(1904, 0, 1), { date1904: true })).toEqual("1/1/04");
    });
  })
});
