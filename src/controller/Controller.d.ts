import { WorkBookJSON, StyleType, ChangeEventType, IController, IHooks, IModel, WorksheetType, IWindowSize, CanvasOverlayPosition, ScrollValue, IRange, MainDom } from '@/types';
export declare class Controller implements IController {
    private scrollValue;
    private model;
    private changeSet;
    private copyRanges;
    private isCut;
    private hooks;
    private viewSize;
    private headerSize;
    private mainDom;
    constructor(model: IModel);
    getCurrentSheetId(): string;
    getSheetList(): WorkBookJSON['workbook'];
    getSheetInfo(sheetId: string): WorksheetType;
    setHooks(hooks: IHooks): void;
    private emitChange;
    getActiveCell(): IRange;
    private setSheetCell;
    setActiveCell(range: IRange): void;
    setCurrentSheetId(id: string): void;
    addSheet: () => void;
    deleteSheet: (sheetId?: string) => void;
    hideSheet(sheetId?: string | undefined): void;
    unhideSheet(sheetId?: string | undefined): void;
    renameSheet(sheetName: string, sheetId?: string | undefined): void;
    fromJSON(json: WorkBookJSON): void;
    toJSON(): WorkBookJSON;
    setCellValues(value: string[][], style: Partial<StyleType>[][], ranges: IRange[]): void;
    setCellStyle(style: Partial<StyleType>, ranges: IRange[]): void;
    getCell: (range: IRange) => import("@/types").ModelCellValue;
    canRedo(): boolean;
    canUndo(): boolean;
    undo(): void;
    redo(): void;
    getColWidth(col: number): number;
    setColWidth(col: number, width: number): void;
    getRowHeight(row: number): number;
    setRowHeight(row: number, height: number): void;
    private computeViewSize;
    getViewSize(): {
        width: number;
        height: number;
    };
    getCellSize(row: number, col: number): IWindowSize;
    getHeaderSize(): {
        width: number;
        height: number;
    };
    computeCellPosition(row: number, col: number): CanvasOverlayPosition;
    addRow(rowIndex: number, count: number): void;
    addCol(colIndex: number, count: number): void;
    deleteCol(colIndex: number, count: number): void;
    deleteRow(rowIndex: number, count: number): void;
    getChangeSet(): Set<ChangeEventType>;
    getScroll(): ScrollValue;
    setScroll(data: ScrollValue): void;
    private parseText;
    private parseHTML;
    private getCopyData;
    paste(event?: ClipboardEvent): Promise<void>;
    copy(event?: ClipboardEvent): void;
    cut(event?: ClipboardEvent): void;
    getCopyRanges(): IRange[];
    getDomRect(): CanvasOverlayPosition;
    setMainDom(dom: MainDom): void;
    getMainDom(): MainDom;
}
