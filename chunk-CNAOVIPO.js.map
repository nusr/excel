{
  "version": 3,
  "sources": ["../src/canvas/shortcut.ts", "../src/canvas/MainCanvas.ts", "../src/canvas/event.ts", "../src/canvas/index.ts"],
  "sourcesContent": ["import {\n  KeyboardEventItem,\n  IController,\n  EUnderLine,\n  EditorStatus,\n  IRange,\n  ScrollValue,\n} from '@/types';\nimport {\n  isMac,\n  SHEET_ITEM_TEST_ID_PREFIX,\n  sheetViewSizeSet,\n  headerSizeSet,\n  sizeConfig,\n  canvasSizeSet,\n  FORMULA_EDITOR_ROLE,\n  MERGE_CELL_LINE_BREAK,\n  LINE_BREAK,\n  isMergeContent,\n} from '@/util';\nimport { coreStore } from '@/containers/store';\nexport const BOTTOM_BUFF = 200;\n\nexport function handleTabClick(controller: IController) {\n  controller.batchUpdate(() => {\n    checkActiveElement(controller);\n    controller.setNextActiveCell('right');\n    recalculateScroll(controller);\n    return true;\n  });\n}\n\nexport function handleEnterClick(controller: IController) {\n  controller.batchUpdate(() => {\n    checkActiveElement(controller);\n    controller.setNextActiveCell('down');\n    recalculateScroll(controller);\n    return true;\n  });\n}\n\nexport function computeScrollRowAndCol(\n  controller: IController,\n  left: number,\n  top: number,\n) {\n  const oldScroll = controller.getScroll();\n  let { row, col } = oldScroll;\n  if (oldScroll.top !== top) {\n    row = 0;\n    let t = top;\n    while (t > 0) {\n      const a = controller.getRowHeight(row).len;\n      if (a > t) {\n        break;\n      }\n      t -= a;\n      row++;\n    }\n  }\n  if (oldScroll.left !== left) {\n    col = 0;\n    let t = left;\n    while (t > 0) {\n      const a = controller.getColWidth(col).len;\n      if (a > t) {\n        break;\n      }\n      t -= a;\n      col++;\n    }\n  }\n\n  return {\n    row,\n    col,\n  };\n}\n\nexport function scrollSheetToView(sheetId: string) {\n  const selector = `div[data-testid=\"${SHEET_ITEM_TEST_ID_PREFIX}${sheetId}\"]`;\n  const dom = document.querySelector(selector);\n  if (dom && typeof dom.scrollIntoView === 'function') {\n    dom.scrollIntoView();\n  }\n}\n\nexport function scrollToView(controller: IController, range: IRange) {\n  controller.batchUpdate(() => {\n    const sheetId = range.sheetId || controller.getCurrentSheetId();\n    if (sheetId !== controller.getCurrentSheetId()) {\n      controller.setCurrentSheetId(sheetId);\n    }\n    const sheetInfo = controller.getSheetInfo(sheetId);\n    if (!sheetInfo) {\n      return true;\n    }\n    if (\n      range.row < 0 ||\n      range.col < 0 ||\n      range.row >= sheetInfo.rowCount ||\n      range.col >= sheetInfo.colCount\n    ) {\n      return true;\n    }\n    const scroll = controller.getScroll(sheetId);\n    const old = controller.computeCellPosition({\n      row: scroll.row,\n      col: scroll.col,\n      colCount: 1,\n      rowCount: 1,\n      sheetId: sheetId,\n    });\n    const size = canvasSizeSet.get();\n    const headerSize = headerSizeSet.get();\n    const { top, left } = controller.computeCellPosition(range);\n    const minTop = old.top;\n    const minLeft = old.left;\n    const maxTop = old.top + size.height - headerSize.height;\n    const maxLeft = old.left + size.width - headerSize.width;\n    if (top >= minTop && top < maxTop && left >= minLeft && left <= maxLeft) {\n      controller.setActiveRange(range);\n      return true;\n    }\n    const oldPosition = controller.computeCellPosition(\n      controller.getActiveRange().range,\n    );\n\n    scrollBar(controller, left - oldPosition.left, top - oldPosition.top);\n    controller.setActiveRange(range);\n    return true;\n  });\n}\n\nexport function computeScrollPosition(left: number, top: number) {\n  const contentSize = parseInt(sizeConfig.scrollBarContent, 10);\n  const canvasRect = canvasSizeSet.get();\n  const viewSize = sheetViewSizeSet.get();\n  const maxHeight = viewSize.height - canvasRect.height + BOTTOM_BUFF;\n  const maxWidth = viewSize.width - canvasRect.width + BOTTOM_BUFF;\n  const maxScrollHeight = canvasRect.height - contentSize;\n  const maxScrollWidth = canvasRect.width - contentSize;\n\n  const scrollTop = Math.floor((top * maxScrollHeight) / maxHeight);\n  const scrollLeft = Math.floor((left * maxScrollWidth) / maxWidth);\n  return {\n    maxHeight,\n    maxWidth,\n    maxScrollHeight,\n    maxScrollWidth,\n    scrollTop,\n    scrollLeft,\n  };\n}\nexport function scrollBar(\n  controller: IController,\n  scrollX: number,\n  scrollY: number,\n) {\n  const oldScroll = controller.getScroll();\n  const { maxHeight, maxWidth, maxScrollHeight, maxScrollWidth } =\n    computeScrollPosition(oldScroll.left, oldScroll.top);\n  let top = oldScroll.top + Math.ceil(scrollY);\n  if (top < 0) {\n    top = 0;\n  } else if (top > maxHeight) {\n    top = maxHeight;\n  }\n\n  let left = oldScroll.left + Math.ceil(scrollX);\n  if (left < 0) {\n    left = 0;\n  } else if (left > maxWidth) {\n    left = maxWidth;\n  }\n  const { row, col } = computeScrollRowAndCol(controller, left, top);\n  const scrollTop = Math.floor((top * maxScrollHeight) / maxHeight);\n  const scrollLeft = Math.floor((left * maxScrollWidth) / maxWidth);\n  const newValue: ScrollValue = {\n    row,\n    col,\n    top,\n    left,\n    scrollTop,\n    scrollLeft,\n  };\n  controller.setScroll(newValue);\n}\n\nexport function recalculateScroll(controller: IController) {\n  const activeCell = controller.getActiveRange().range;\n  const temp = {\n    row: activeCell.row,\n    col: activeCell.col,\n    colCount: 1,\n    rowCount: 1,\n    sheetId: '',\n  };\n  const position = controller.computeCellPosition(temp);\n  const cellSize = controller.getCellSize(temp);\n  const domRect = canvasSizeSet.get();\n  const oldScroll = controller.getScroll();\n  const sheetInfo = controller.getSheetInfo(controller.getCurrentSheetId())!;\n  const headerSize = headerSizeSet.get();\n  const buff = 5;\n  const { maxHeight, maxWidth, maxScrollHeight, maxScrollWidth } =\n    computeScrollPosition(oldScroll.left, oldScroll.top);\n  if (position.left + cellSize.width + buff > domRect.width) {\n    if (oldScroll.col <= sheetInfo.colCount - 2) {\n      const left = oldScroll.left + controller.getColWidth(oldScroll.col).len;\n      const scrollLeft = Math.floor((left * maxScrollWidth) / maxWidth);\n      controller.setScroll({\n        ...oldScroll,\n        col: oldScroll.col + 1,\n        left,\n        scrollLeft,\n      });\n    }\n  }\n\n  if (position.left - headerSize.width < domRect.left + buff) {\n    if (oldScroll.col >= 1) {\n      const left = oldScroll.left - controller.getColWidth(oldScroll.col).len;\n      const scrollLeft = Math.floor((left * maxScrollWidth) / maxWidth);\n      controller.setScroll({\n        ...oldScroll,\n        col: oldScroll.col - 1,\n        left,\n        scrollLeft,\n      });\n    }\n  }\n  if (position.top + cellSize.height + buff > domRect.height) {\n    if (oldScroll.row <= sheetInfo.rowCount - 2) {\n      const top = oldScroll.top + controller.getRowHeight(oldScroll.row).len;\n      const scrollTop = Math.floor((top * maxScrollHeight) / maxHeight);\n      controller.setScroll({\n        ...oldScroll,\n        row: oldScroll.row + 1,\n        top,\n        scrollTop,\n      });\n    }\n  }\n\n  if (position.top - headerSize.height < domRect.top + buff) {\n    if (oldScroll.row >= 1) {\n      const top = oldScroll.top - controller.getRowHeight(oldScroll.row).len;\n      const scrollTop = Math.floor((top * maxScrollHeight) / maxHeight);\n      controller.setScroll({\n        ...oldScroll,\n        row: oldScroll.row - 1,\n        top,\n        scrollTop,\n      });\n    }\n  }\n}\n\nexport function checkFocus() {\n  const dom = document.activeElement;\n  if (!dom || dom.getAttribute('data-role') !== FORMULA_EDITOR_ROLE) {\n    return false;\n  }\n  return true;\n}\n\nexport function setActiveCellValue(controller: IController) {\n  const inputDom = document.activeElement as\n    | HTMLInputElement\n    | HTMLTextAreaElement;\n  const { range, isMerged } = controller.getActiveRange();\n  const cellData = controller.getCell(range);\n  let value = inputDom.value;\n  if (typeof cellData?.value === 'string' && isMergeContent(isMerged, cellData?.value)) {\n    value = value.replaceAll(LINE_BREAK, MERGE_CELL_LINE_BREAK);\n  }\n  controller.setCellValue(value, range);\n  inputDom.value = '';\n  inputDom.blur();\n  coreStore.setState({\n    editorStatus: EditorStatus.NONE,\n  });\n}\n\nfunction checkActiveElement(controller: IController) {\n  if (!checkFocus()) {\n    return;\n  }\n  setActiveCellValue(controller);\n}\n/* jscpd:ignore-start */\nexport const keyboardEventList: KeyboardEventItem[] = [\n  {\n    key: 'Enter',\n    modifierKey: [],\n    handler: handleEnterClick,\n  },\n  {\n    key: 'Tab',\n    modifierKey: [],\n    handler: handleTabClick,\n  },\n  {\n    key: 'ArrowDown',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      controller.batchUpdate(() => {\n        checkActiveElement(controller);\n        const viewSize = sheetViewSizeSet.get();\n        scrollBar(controller, 0, viewSize.height);\n        return true;\n      });\n    },\n  },\n  {\n    key: 'ArrowUp',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      controller.batchUpdate(() => {\n        checkActiveElement(controller);\n        const viewSize = sheetViewSizeSet.get();\n        scrollBar(controller, 0, -viewSize.height);\n        return true;\n      });\n    },\n  },\n  {\n    key: 'ArrowRight',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      controller.batchUpdate(() => {\n        checkActiveElement(controller);\n        const viewSize = sheetViewSizeSet.get();\n        scrollBar(controller, viewSize.width, 0);\n        return true;\n      });\n    },\n  },\n  {\n    key: 'ArrowLeft',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      controller.batchUpdate(() => {\n        checkActiveElement(controller);\n        const viewSize = sheetViewSizeSet.get();\n        scrollBar(controller, -viewSize.width, 0);\n        return true;\n      });\n    },\n  },\n  {\n    key: 'ArrowDown',\n    modifierKey: [],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      handleEnterClick(controller);\n    },\n  },\n  {\n    key: 'ArrowUp',\n    modifierKey: [],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      controller.batchUpdate(() => {\n        checkActiveElement(controller);\n        controller.setNextActiveCell('up');\n        recalculateScroll(controller);\n        return true;\n      });\n    },\n  },\n  {\n    key: 'ArrowRight',\n    modifierKey: [],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      handleTabClick(controller);\n    },\n  },\n  {\n    key: 'ArrowLeft',\n    modifierKey: [],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      controller.batchUpdate(() => {\n        checkActiveElement(controller);\n        controller.setNextActiveCell('left');\n        recalculateScroll(controller);\n        return true;\n      });\n    },\n  },\n  {\n    key: 'b',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      const cellData = controller.getCell(controller.getActiveRange().range);\n      controller.updateCellStyle(\n        { isBold: !cellData?.style?.isBold },\n        controller.getActiveRange().range,\n      );\n    },\n  },\n  {\n    key: 'i',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n\n      const cellData = controller.getCell(controller.getActiveRange().range);\n      controller.updateCellStyle(\n        { isItalic: !cellData?.style?.isItalic },\n        controller.getActiveRange().range,\n      );\n    },\n  },\n  {\n    key: '5',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      const cellData = controller.getCell(controller.getActiveRange().range);\n      controller.updateCellStyle(\n        { isStrike: !cellData?.style?.isStrike },\n        controller.getActiveRange().range,\n      );\n    },\n  },\n  {\n    key: 'u',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      if (checkFocus()) {\n        return;\n      }\n      const cellData = controller.getCell(controller.getActiveRange().range);\n      const underline = cellData?.style?.underline;\n      let newUnderline = EUnderLine.NONE;\n      if (underline === undefined || underline === EUnderLine.NONE) {\n        newUnderline = EUnderLine.SINGLE;\n      } else {\n        newUnderline = EUnderLine.NONE;\n      }\n      controller.updateCellStyle(\n        { underline: newUnderline },\n        controller.getActiveRange().range,\n      );\n    },\n  },\n  {\n    key: 'z',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      controller.undo();\n    },\n  },\n  {\n    key: 'y',\n    modifierKey: [isMac() ? 'meta' : 'ctrl'],\n    handler: (controller) => {\n      controller.redo();\n    },\n  },\n];\n/* jscpd:ignore-end */\n", "import { EventType, MainView, IController, RequestInit, ResponseRender, RequestRender, IWindowSize } from '@/types';\nimport { canvasSizeSet, dpr, getTheme, headerSizeSet } from '@/util';\nimport * as ComLink from 'comlink'\n\n\nexport class MainCanvas implements MainView {\n  private controller: IController;\n  private canvas: HTMLCanvasElement;\n  constructor(controller: IController, canvas: HTMLCanvasElement) {\n    this.controller = controller;\n    this.canvas = canvas;\n    const offscreen = canvas?.transferControlToOffscreen?.();\n    const worker = this.controller.getHooks().worker;\n    if (offscreen) {\n      const data: RequestInit = {\n        canvas: offscreen,\n        dpr: dpr(),\n      };\n      worker.init(ComLink.transfer(data, [data.canvas]));\n    }\n  }\n  private renderCallback = (result: ResponseRender) => {\n    const { rowMap, colMap } = result\n    const rowKeys = Object.keys(rowMap);\n    const colKeys = Object.keys(colMap);\n    if (colKeys.length === 0 && rowKeys.length === 0) {\n      return;\n    }\n    this.controller.batchUpdate(() => {\n      for (const [row, h] of Object.entries(rowMap)) {\n        const r = parseInt(row, 10);\n        if (h !== this.controller.getRowHeight(r).len) {\n          this.controller.setRowHeight(r, h);\n        }\n      }\n      for (const [col, w] of Object.entries(colMap)) {\n        const c = parseInt(col, 10);\n        if (w !== this.controller.getColWidth(c).len) {\n          this.controller.setColWidth(c, w);\n        }\n      }\n      return true\n    }, true)\n  }\n  async render(data: EventType) {\n    const { controller } = this;\n    const currentId = controller.getCurrentSheetId();\n    const sheetInfo = controller.getSheetInfo(currentId);\n    if (!sheetInfo) {\n      return;\n    }\n    const copyRange = controller.getCopyRange();\n    const jsonData = controller.toJSON();\n    const eventData: RequestRender = {\n      changeSet: data.changeSet,\n      theme: getTheme(),\n      canvasSize: canvasSizeSet.get(),\n      headerSize: headerSizeSet.get(),\n      currentSheetInfo: sheetInfo,\n      scroll: controller.getScroll(currentId),\n      range: controller.getActiveRange().range,\n      copyRange,\n      currentMergeCells: controller.getMergeCellList(currentId),\n      customHeight: jsonData.customHeight,\n      customWidth: jsonData.customWidth,\n      sheetData: jsonData.worksheets[currentId] || {},\n    };\n\n    this.controller.getHooks().worker.render(eventData, ComLink.proxy(this.renderCallback));\n  }\n  resize() {\n    const { canvas } = this;\n    const { width, height } = canvasSizeSet.get();\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const eventData: IWindowSize = {\n      width,\n      height,\n    };\n    this.controller.getHooks().worker.resize(eventData);\n  }\n}\n", "import {\n  IController,\n  KeyboardEventItem,\n  EditorStatus,\n  IRange,\n} from '@/types';\nimport {\n  isTestEnv,\n  throttle,\n  CUSTOM_FORMAT,\n  eventEmitter,\n  deepEqual,\n  paste,\n} from '@/util';\nimport { keyboardEventList, scrollBar } from './shortcut';\nimport { coreStore } from '@/containers/store';\n\ntype EventType = {\n  target?: {\n    tagName?: string;\n  }\n}\n\n\nfunction isInputEvent(event: Event): boolean {\n  const name = (event as EventType)?.target?.tagName?.toLowerCase();\n  return name === 'input' || name === 'textarea';\n}\n\nexport function registerGlobalEvent(\n  controller: IController,\n  resizeWindow: () => void,\n) {\n  function handleKeydown(event: KeyboardEvent) {\n    if (isInputEvent(event)) {\n      return;\n    }\n    const list = keyboardEventList.filter((v) => v.key === event.key);\n    list.sort((a, b) => b.modifierKey.length - a.modifierKey.length);\n    let temp: KeyboardEventItem | undefined = undefined;\n    for (const item of list) {\n      if (item.modifierKey.length > 0) {\n        if (item.modifierKey.some((v) => event[`${v}Key`])) {\n          temp = item;\n          break;\n        }\n      } else {\n        temp = item;\n        break;\n      }\n    }\n    if (temp) {\n      event.preventDefault();\n      temp.handler(controller);\n      return;\n    }\n    if (event.metaKey || event.ctrlKey) {\n      return;\n    }\n    coreStore.setState({\n      editorStatus: EditorStatus.EDIT_CELL,\n    });\n  }\n\n  const handleWheel = throttle((event: WheelEvent) => {\n    const tagName = (event as EventType)?.target?.tagName?.toLowerCase();\n    if (tagName === 'canvas' || isTestEnv()) {\n      scrollBar(controller, event.deltaX, event.deltaY);\n    }\n  }, 1000 / 60);\n\n  function handlePaste(event: ClipboardEvent) {\n    if (isInputEvent(event)) {\n      return;\n    }\n    event.preventDefault();\n    controller.paste(event);\n  }\n\n  function handleCopy(event: ClipboardEvent) {\n    if (isInputEvent(event)) {\n      return;\n    }\n\n    event.preventDefault();\n    controller.copy(event);\n  }\n\n  function handleCut(event: ClipboardEvent) {\n    if (isInputEvent(event)) {\n      return;\n    }\n    event.preventDefault();\n    controller.cut(event);\n  }\n\n  function handleFocus(event: FocusEvent) {\n    if (isInputEvent(event)) {\n      return;\n    }\n    paste().then((result) => {\n      const oldRange = controller.getCopyRange();\n      let newRange: IRange | undefined = undefined;\n      if (result[CUSTOM_FORMAT]) {\n        const data = result[CUSTOM_FORMAT];\n        newRange =\n          !data.floatElementUuid && data.range ? data.range : undefined;\n        controller.setFloatElementUuid(data.floatElementUuid);\n      } else {\n        controller.setFloatElementUuid('');\n      }\n      if (!deepEqual(newRange, oldRange)) {\n        controller.setCopyRange(newRange);\n        eventEmitter.emit('modelChange', {\n          changeSet: new Set(['cellStyle']),\n        });\n      }\n    });\n  }\n\n  window.addEventListener('resize', resizeWindow);\n  document.body.addEventListener('keydown', handleKeydown);\n  document.body.addEventListener('wheel', handleWheel);\n  document.body.addEventListener('paste', handlePaste);\n  document.body.addEventListener('copy', handleCopy);\n  document.body.addEventListener('cut', handleCut);\n  window.addEventListener('focus', handleFocus);\n\n  return () => {\n    window.removeEventListener('resize', resizeWindow);\n    document.body.removeEventListener('keydown', handleKeydown);\n    document.body.removeEventListener('wheel', handleWheel);\n    document.body.removeEventListener('paste', handlePaste);\n    document.body.removeEventListener('copy', handleCopy);\n    document.body.removeEventListener('cut', handleCut);\n    window.removeEventListener('focus', handleFocus);\n  };\n}\n", "import { MainView, IController } from '@/types';\nimport { MainCanvas } from './MainCanvas';\n\nexport { registerGlobalEvent } from './event';\nexport {\n  computeScrollRowAndCol,\n  computeScrollPosition,\n  checkFocus,\n  setActiveCellValue,\n  scrollBar,\n  scrollToView,\n  scrollSheetToView,\n} from './shortcut';\n\nlet instance: MainCanvas;\n\nexport function initRenderCanvas(\n  controller: IController,\n  canvas: HTMLCanvasElement,\n): MainView {\n  if (instance) {\n    return instance;\n  }\n  instance = new MainCanvas(controller, canvas);\n  return instance;\n}\n"],
  "mappings": "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",
  "names": ["BOTTOM_BUFF", "handleTabClick", "controller", "checkActiveElement", "recalculateScroll", "handleEnterClick", "computeScrollRowAndCol", "left", "top", "oldScroll", "row", "col", "t", "a", "scrollSheetToView", "sheetId", "selector", "SHEET_ITEM_TEST_ID_PREFIX", "dom", "scrollToView", "range", "sheetInfo", "scroll", "old", "size", "canvasSizeSet", "headerSize", "headerSizeSet", "minTop", "minLeft", "maxTop", "maxLeft", "oldPosition", "scrollBar", "computeScrollPosition", "contentSize", "sizeConfig", "canvasRect", "viewSize", "sheetViewSizeSet", "maxHeight", "maxWidth", "maxScrollHeight", "maxScrollWidth", "scrollTop", "scrollLeft", "scrollX", "scrollY", "newValue", "activeCell", "temp", "position", "cellSize", "domRect", "buff", "checkFocus", "FORMULA_EDITOR_ROLE", "setActiveCellValue", "inputDom", "isMerged", "cellData", "value", "isMergeContent", "LINE_BREAK", "MERGE_CELL_LINE_BREAK", "coreStore", "keyboardEventList", "isMac", "underline", "newUnderline", "MainCanvas", "controller", "canvas", "result", "rowMap", "colMap", "rowKeys", "row", "h", "r", "col", "w", "c", "offscreen", "worker", "data", "dpr", "transfer", "currentId", "sheetInfo", "copyRange", "jsonData", "eventData", "getTheme", "canvasSizeSet", "headerSizeSet", "proxy", "width", "height", "isInputEvent", "event", "name", "registerGlobalEvent", "controller", "resizeWindow", "handleKeydown", "list", "keyboardEventList", "v", "a", "b", "temp", "item", "coreStore", "handleWheel", "throttle", "isTestEnv", "scrollBar", "handlePaste", "handleCopy", "handleCut", "handleFocus", "paste", "result", "oldRange", "newRange", "CUSTOM_FORMAT", "data", "deepEqual", "eventEmitter", "instance", "initRenderCanvas", "controller", "canvas", "MainCanvas"]
}
